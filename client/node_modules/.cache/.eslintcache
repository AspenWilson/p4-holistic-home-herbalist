[{"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/index.js":"1","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/App.js":"2","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Authentication.js":"3","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/NavBar.js":"4","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herbs.js":"5","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbCard.js":"6","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipes.js":"7","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Properties.js":"8","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Home.js":"9","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeCard.js":"10","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/PropertyCard.js":"11","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herb.js":"12","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Profile.js":"13","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipe.js":"14","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Search.js":"15","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Filter.js":"16","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/ModalPopout.js":"17","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/FormHelpers.js":"18","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbForm.js":"19","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeForm.js":"20","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbEdits.js":"21","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeEdits.js":"22","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/EditFormHelpers.js":"23","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/context/AppContext.js":"24","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentRecipe.js":"25","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentProfile.js":"26","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentEdits.js":"27","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/StylingHelpers.js":"28","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/CardHelpers.js":"29","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/GeneralHelpers.js":"30","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/DosageGuide.js":"31","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/EssentialOil.js":"32","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Decoctions.js":"33","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Capsules.js":"34","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Fresh.js":"35","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Extracts.js":"36","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Dried.js":"37","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Infusions.js":"38","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Glycerite.js":"39","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Powder.js":"40","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Tincture.js":"41","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Oil.js":"42","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Syrup.js":"43","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Topical.js":"44","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Salve.js":"45"},{"size":627,"mtime":1699998657667,"results":"46","hashOfConfig":"47"},{"size":1720,"mtime":1701281993490,"results":"48","hashOfConfig":"47"},{"size":2699,"mtime":1701281864541,"results":"49","hashOfConfig":"47"},{"size":2336,"mtime":1701282147278,"results":"50","hashOfConfig":"47"},{"size":3274,"mtime":1698960897090,"results":"51","hashOfConfig":"47"},{"size":2951,"mtime":1698960897090,"results":"52","hashOfConfig":"47"},{"size":2752,"mtime":1698971134466,"results":"53","hashOfConfig":"47"},{"size":2920,"mtime":1698971134462,"results":"54","hashOfConfig":"47"},{"size":2121,"mtime":1698940056746,"results":"55","hashOfConfig":"47"},{"size":2737,"mtime":1698971134425,"results":"56","hashOfConfig":"47"},{"size":2088,"mtime":1698959611108,"results":"57","hashOfConfig":"47"},{"size":2380,"mtime":1698971134438,"results":"58","hashOfConfig":"47"},{"size":2229,"mtime":1701282363290,"results":"59","hashOfConfig":"47"},{"size":4489,"mtime":1698960897090,"results":"60","hashOfConfig":"47"},{"size":365,"mtime":1698954606809,"results":"61","hashOfConfig":"47"},{"size":572,"mtime":1698875857546,"results":"62","hashOfConfig":"47"},{"size":2325,"mtime":1701282435865,"results":"63","hashOfConfig":"47"},{"size":3687,"mtime":1698958743430,"results":"64","hashOfConfig":"47"},{"size":5368,"mtime":1698971134466,"results":"65","hashOfConfig":"47"},{"size":4254,"mtime":1698971134458,"results":"66","hashOfConfig":"47"},{"size":8854,"mtime":1698960897090,"results":"67","hashOfConfig":"47"},{"size":6619,"mtime":1698971134428,"results":"68","hashOfConfig":"47"},{"size":4431,"mtime":1698959611112,"results":"69","hashOfConfig":"47"},{"size":4916,"mtime":1701281934437,"results":"70","hashOfConfig":"47"},{"size":1042,"mtime":1698878611382,"results":"71","hashOfConfig":"47"},{"size":2073,"mtime":1698962308362,"results":"72","hashOfConfig":"47"},{"size":2173,"mtime":1698960897105,"results":"73","hashOfConfig":"47"},{"size":1310,"mtime":1698247625254,"results":"74","hashOfConfig":"47"},{"size":4564,"mtime":1698971134424,"results":"75","hashOfConfig":"47"},{"size":1917,"mtime":1699908081120,"results":"76","hashOfConfig":"47"},{"size":2334,"mtime":1699908466061,"results":"77","hashOfConfig":"47"},{"size":140,"mtime":1699908081120,"results":"78","hashOfConfig":"47"},{"size":133,"mtime":1699908081120,"results":"79","hashOfConfig":"47"},{"size":126,"mtime":1699908081120,"results":"80","hashOfConfig":"47"},{"size":118,"mtime":1699908081125,"results":"81","hashOfConfig":"47"},{"size":127,"mtime":1699908081120,"results":"82","hashOfConfig":"47"},{"size":118,"mtime":1699908081120,"results":"83","hashOfConfig":"47"},{"size":130,"mtime":1699908081127,"results":"84","hashOfConfig":"47"},{"size":130,"mtime":1699908081135,"results":"85","hashOfConfig":"47"},{"size":121,"mtime":1699908081135,"results":"86","hashOfConfig":"47"},{"size":127,"mtime":1699908081135,"results":"87","hashOfConfig":"47"},{"size":112,"mtime":1699908081130,"results":"88","hashOfConfig":"47"},{"size":118,"mtime":1699908081135,"results":"89","hashOfConfig":"47"},{"size":124,"mtime":1699908081135,"results":"90","hashOfConfig":"47"},{"size":118,"mtime":1699908081133,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1ecga3h",{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"94"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"94"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"94"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"94"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"94"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/index.js",[],["188","189"],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/App.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Authentication.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/NavBar.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herbs.js",["190"],"import React, { useState, useContext, useEffect } from 'react'\nimport { Card, Grid, Divider } from 'semantic-ui-react'\nimport { useParams } from 'react-router-dom'\nimport { AppContext } from '../context/AppContext';\nimport { handleSearches, handleFilterChange } from './helpers/GeneralHelpers'\nimport HerbCard from './HerbCard'\nimport Search from './Search'\nimport Filter from './Filter'\nimport ModalPopout from './ModalPopout'\nimport \"../index.css\"\n\nfunction Herbs({ page }) {\n    const { id } = useParams()\n    const { properties, herbs, savedHerbs, enteredHerbs } = useContext(AppContext)\n\n    const [searchResults, setSearchResults] = useState([]);\n    const [filteredHerbs, setFilteredHerbs] = useState([])\n    const [selectedProperties, setSelectedProperties] = useState([]);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [propertyHerbs, setPropertyHerbs] = useState([])\n\n    useEffect(() => {\n        const list = herbs.filter((herb) => herb.properties.some((property) => property.id === id))\n        setPropertyHerbs(list)\n    }, [id])\n    \n    const herbsList = \n        page === 'home' ? herbs :\n        page === 'profile - saved' ? savedHerbs :\n        page === 'profile - entered' ? enteredHerbs :\n        page === 'properties' ? propertyHerbs :\n        null\n\n    const displayedHerbs = \n        searchTerm && searchResults.length > 0 ? searchResults.map((herb) => <HerbCard key={herb.id} herb={herb} page={page}/>) :\n        searchTerm && searchResults.length === 0 ? <h3>No herbs match your search.</h3> :\n        selectedProperties.length > 0 && filteredHerbs.length > 0 ? filteredHerbs.map((herb) => <HerbCard key={herb.id} herb={herb} page={page}/>) :\n        selectedProperties.length > 0 && filteredHerbs.length === 0 ? <h3>No herbs match your filter.</h3> : \n        id && propertyHerbs.length > 0 ? propertyHerbs.map((herb) => <HerbCard key={herb.id} herb={herb} />) :\n        id && propertyHerbs.length === 0 ? <h3>No herbs have this property.</h3> :\n        herbsList.map((herb) => <HerbCard key={herb.id} herb={herb} page={page}/>);\n\n    return (\n        <div>\n            <ModalPopout modalType='new herb' msg='Add a new herb' />\n            <Divider />\n            <Grid columns={ 2 }>\n                <Grid.Column>\n                    <h3>Search for herbs by name...</h3>\n                    <Search \n                        onSearch={(searchTerm) => handleSearches(searchTerm, setSearchTerm, herbsList, setSearchResults)} \n                        searchedHerbs={ searchResults }\n                        searchTerm = { searchTerm }\n                    />\n                </Grid.Column>\n\n                <Grid.Column>\n                    <h3> OR filter herbs by their properties</h3>\n                    <Filter \n                        onFilterChange={(selectedProperties) => handleFilterChange(selectedProperties, setSelectedProperties, herbsList, setFilteredHerbs)}\n                        selectedProperties={ selectedProperties } \n                        properties={ properties }\n                    />\n                </Grid.Column>\n            </Grid>\n            <br />\n            <Card.Group itemsPerRow={ 4 } >\n                { displayedHerbs }\n            </Card.Group>\n        </div>\n    )\n}\n\nexport default Herbs\n\n","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbCard.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipes.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Properties.js",["191"],"import React, { useContext, useState, useEffect } from 'react'\nimport PropertyCard from './PropertyCard'\nimport { AppContext } from '../context/AppContext';\nimport { Card, Button, Divider } from 'semantic-ui-react'\nimport Search from './Search';\nimport { handleSearches } from './helpers/GeneralHelpers';\n\n\nfunction Properties() {\n    const { properties } = useContext(AppContext)\n    const [searchTerm, setSearchTerm] = useState('');\n    const [searchResults, setSearchResults] = useState([]);\n    const [selectedLetter, setSelectedLetter] = useState('');\n    const [filteredProperties, setFilteredProperties] = useState([]);\n\n    useEffect(() => {\n        const filtered = properties.filter(property =>\n            property.name.charAt(0).toUpperCase() === selectedLetter\n        );\n        setFilteredProperties(filtered);\n    }, [selectedLetter])\n\n    const uniqueFirstLetters = [...new Set(properties.map(property => property.name.charAt(0).toUpperCase()))];\n\n    const letters = uniqueFirstLetters.map((letter) => {\n        return (\n            <Button circular style={{ backgroundColor: '#056d52', color:'white' }} key={ letter }\n            className={ selectedLetter === letter ? 'active' : '' }\n            onClick={() => setSelectedLetter(letter)}>\n                <strong>{letter}</strong>\n            </Button>\n    )})\n\n    const displayedProperties = \n        searchTerm && searchResults.length > 0\n            ? searchResults.map((property) => <PropertyCard property={ property } key={ property.id } />)\n        : searchTerm && searchResults.length === 0\n            ? <h3>No properties match your search.</h3>\n        : selectedLetter && filteredProperties.length > 0\n            ? filteredProperties.map((property) => <PropertyCard property={ property } key={property.id} />)\n        : selectedLetter && filteredProperties.length === 0\n            ? <h3>No properties match your filters.</h3>\n        : properties.map ((property) => <PropertyCard property={ property } key={ property.id }/>)\n\n    return (\n        <div>\n            <h3>Search for properties by name...</h3>\n            <Search \n                onSearch={(searchTerm) => handleSearches(searchTerm, setSearchTerm,properties, setSearchResults)}\n                searchedProperties={ searchResults }\n                searchTerm={ searchTerm }\n            />\n            <Divider />\n            <h3> OR filter properties by first letter</h3>\n            <Button \n                circular \n                style={{ backgroundColor: '#056d52', color:'white' }}\n                className={selectedLetter === '' ? 'active' : ''}\n                onClick={() => setSelectedLetter('')}>\n                <strong>ALL</strong>\n            </Button>\n            {letters}\n            <Divider />\n            <Card.Group itemsPerRow={ 3 }>\n                { displayedProperties }\n            </Card.Group>\n        </div>\n    )\n}\n\nexport default Properties","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Home.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeCard.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/PropertyCard.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herb.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Profile.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipe.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Search.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Filter.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/ModalPopout.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/FormHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbForm.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeForm.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbEdits.js",["192"],"import React, { useContext, useEffect, useState } from \"react\"\nimport {  Formik, Form, FieldArray } from \"formik\"\nimport * as yup from \"yup\"\nimport { AppContext } from \"../context/AppContext\"\nimport { Card, Grid, Image, Icon, Button } from 'semantic-ui-react'\nimport { DosageEditCards, PropertyEditCards } from \"./helpers/EditFormHelpers\"\nimport { FormHeader } from \"./helpers/StylingHelpers\"\nimport { IDDropdowns, dosageDrops, FormInputField, FormTextBoxField, FormMultiSelectField, FormSelectField } from \"./helpers/FormHelpers\"\nimport { headers } from \"./helpers/GeneralHelpers\"\n\n\nfunction HerbEdits ({ id }) {\n    const { properties, handleModalSuccess, user, refreshEnteredHerbs, refreshHerbs } = useContext(AppContext)\n    const [herb, setHerb] = useState(null)\n    const [deletedDosages, setDeletedDosages] = useState([])\n    const [deletedProperties, setDeletedProperties] = useState([])\n    const [show, setShow] = useState(null)\n\n    useEffect(() => {\n        fetch(`/api/herbs/${id}`)\n          .then((resp) => resp.json())\n          .then((data) => {\n            setHerb(data);\n          })\n      }, [id]);\n    \n      const formSchema = yup.object().shape({\n        name: yup.string().required(\"Herb name is required.\"),\n        latin_name: yup.string().required(\"Latin name is required.\"),\n        description: yup.string().required(\"Herb description is required.\"),\n        warnings: yup.string().required(\"Herb warnings are required. 'None' is acceptable if herb has no known warnings.\"),\n        image_url: yup.string().required(\"Image url link is required.\"),\n        dosages: yup.array().of(\n            yup.object().shape({\n                dosage_form: yup.string(),\n                dosage_description: yup.string()\n            })\n        ),\n        property_ids: yup.array().required(\"At least one property must be added to your new herb.\").min(1, \"At least one property must be added to your new herb.\")\n    })\n\n    const handleSubmit = (values) => {\n        const propertyIdsToRemove = deletedProperties.map((property) => property.id);\n        const updatedProperties = values.property_ids.filter((propertyID)=> !propertyIdsToRemove.includes(propertyID))\n        \n        const updatedHerb = {\n            name: values.name,\n            latin_name: values.latin_name,\n            description: values.description,\n            warnings: values.warnings,\n            image_url: values.image_url,\n            dosages: values.dosages,\n            property_ids: updatedProperties\n        }\n        fetch(`/api/herbs/${id}`, {\n            method: 'PATCH',\n            headers,\n            body: JSON.stringify(updatedHerb, null, 2)\n        }).then((resp) => {\n            if(resp.ok) {\n                resp.json().then((data) => {\n                    if (deletedDosages.length > 0) {\n                        deletedDosages.map((dosage) => {\n                            fetch(`/api/herbs/${herb.id}/dosages/${dosage.id}`, {\n                                method: 'DELETE'\n                            })\n                        })\n                    }\n                handleModalSuccess()\n                refreshEnteredHerbs(user)\n                refreshHerbs()\n            })     \n        }})\n    }\n\n    if (!herb) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <Formik \n            initialValues = {{\n                name: herb.name || \"\",\n                latin_name: herb.latin_name || \"\",\n                description: herb.description || \"\",\n                warnings: herb.warnings || \"\",\n                image_url: herb.image_url || \"\",\n                dosages: show ? [{ dosage_form: \"\", dosage_description: \"\" }] : [],\n                property_ids: herb.properties.map((property) => property.id) || []\n            }}\n            enableReinitialize={ true }\n            validationSchema = { formSchema }\n            onSubmit = { handleSubmit }\n        >\n        {(formik) => (\n            <div className='container'>\n            <Card fluid className='flex-outer'>\n                <Form>\n                    <Card.Content className='allCards'>\n                        <Grid columns={ 2 }>\n                            <Grid.Column>\n                                <FormInputField label='Herb Name' name='name' type='text' formik={ formik } />\n                                <FormInputField label='Latin Name' name='latin_name' type='text' formik={ formik } />\n                            </Grid.Column>\n\n                            <Grid.Column>\n                                <FormInputField label='Image Link' name='image_url' type='text' formik={ formik } />\n                                <FormHeader as='h3' textAlign='center'>Current Image</FormHeader>\n                                <Image \n                                    size='small'\n                                    centered\n                                    src={formik.values.image_url}\n                                />\n                            </Grid.Column>\n                        </Grid>\n\n                        <Grid columns={ 2 }>\n                            <Grid.Column>\n                                <FormTextBoxField label='Description' name='description' formik={ formik } />\n                            </Grid.Column>\n\n                            <Grid.Column>\n                                <FormTextBoxField label='Warnings' name='warnings' formik={ formik } />                           \n                            </Grid.Column>\n                        </Grid>\n\n                        <FormHeader as='h3'>Existing Dosages</FormHeader>\n                        <FieldArray name=\"dosages\">\n                        {({ push, remove }) => (\n                            <div>\n                                <Card.Group>\n                                    {herb.dosages.map((dosage, index) => {\n                                        return (\n                                            <DosageEditCards  key={ index } dosage={ dosage } deletedDosages={ deletedDosages } setDeletedDosages={ setDeletedDosages } />\n                                        )\n                                    })}\n                                </Card.Group>\n                                \n                                {show === true ? formik.values.dosages.map((_, index) =>  {\n                                    return (\n                                    <div key={ index }>\n                                        <FormInputField label='Dosage Description' name={`dosages[${index}].dosage_description`} type='text' formik={ formik } />\n                                        <FormSelectField label='Doage Form' name={`dosages[${index}].dosage_form`} formik={formik} options={dosageDrops} />\n\n                                        <Button onClick={() => remove(index)}>\n                                            Remove Dosage\n                                        </Button>\n                                        <br />\n                                        <Button onClick={() => {\n                                            push({ dosage_form: \"\", dosage_description: \"\"})}}\n                                        >\n                                            Add another dosage <Icon name='add' />\n                                        </Button>\n                                    </div>\n                                )}) : null }\n\n                                {show === null ? <Button onClick={() => setShow(true)}>\n                                   Add new dosages to this herb <Icon name='add' />\n                                </Button> : null}\n                            </div>\n                        )}\n                        </FieldArray>\n\n                        <FieldArray name='property_ids'>\n                            <div>\n                                <FormHeader as='h3'>Existing Properties</FormHeader>\n                                    <Card.Group>\n                                        {herb.properties.map((property) => {\n                                            return (\n                                                <PropertyEditCards property={ property } deletedProperties={ deletedProperties } setDeletedProperties={ setDeletedProperties } />\n                                                )\n                                            })}\n                                    </Card.Group>\n                                    <FormMultiSelectField label='Add Properties' name='property_ids' formik={ formik } options={ IDDropdowns(properties) } />\n                            </div>\n                        </FieldArray>\n                    </Card.Content>\n                    <Button fluid type='submit'>Submit edits</Button> \n                </Form>\n            </Card>\n            </div>\n        )}\n    </Formik>      \n    )\n}\n\nexport default HerbEdits\n","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeEdits.js",["193"],"import React, { useContext, useEffect, useState } from \"react\"\nimport { Formik, Form, FieldArray } from \"formik\"\nimport * as yup from \"yup\"\nimport { AppContext } from \"../context/AppContext\"\nimport { Card, Grid, Button, Icon } from 'semantic-ui-react'\nimport { IngredientEditCards } from \"./helpers/EditFormHelpers\"\nimport { FormHeader } from \"./helpers/StylingHelpers\"\nimport { IDDropdowns, amountTypeDrops, herbTypeDrops, FormInputField, FormTextBoxField, FormSelectField } from \"./helpers/FormHelpers\"\nimport { headers } from \"./helpers/GeneralHelpers\"\n\n\nfunction RecipeEdits ({ id }) {\n    const { handleModalSuccess, user, herbs, refreshRecipes, refreshEnteredRecipes } = useContext(AppContext)\n    const [recipe, setRecipe] = useState(null)\n    const [deletedIngredients, setDeletedIngredients] = useState([])\n    const [show, setShow] = useState(null)\n    const [ingredients, setIngredients] = useState([])\n\n    useEffect(() => {\n        fetch(`/api/recipes/${id}`)\n        .then ((resp) => resp.json())\n        .then ((data) => {\n            setRecipe(data)\n        })\n    }, [id])\n\n    useEffect(() => {\n        fetch(`/api/recipes/${id}/ingredients`)\n        .then((resp) => resp.json())\n        .then((data) => setIngredients(data))\n      }, [id])\n\n    const formSchema = yup.object().shape({\n        name: yup.string().required(\"Herb name is required.\"),\n        directions: yup.string().min(50, \"Directions must be at least 50 characters.\").required(\"Directions are required.\"),\n        ingredients : yup.array().of(\n            yup.object().shape({\n                amount: yup.number(),\n                amount_type: yup.string(),\n                herb_type: yup.string(),\n                herb_id: yup.string()\n            })\n        ).min(1, 'At least one ingredient is required.')\n    })\n\n    const handleSubmit = (values) => {\n        const updatedRecipe = {\n            name: values.name, \n            directions: values.directions, \n            ingredients: values.ingredients\n        }\n        fetch(`/api/recipes/${id}`, {\n            method:'PATCH',\n            headers,\n            body: JSON.stringify(updatedRecipe, null, 2)\n        }).then((resp) => {\n            if(resp.ok) {\n                resp.json().then((data) => {\n                    if (deletedIngredients.length > 0) {\n                        deletedIngredients.map((ingredient) => {\n                            fetch(`/api/recipes/${recipe.id}/ingredients/${ingredient.id}`, {\n                                method:'DELETE'\n                        })})\n                    }\n                    handleModalSuccess()\n                    refreshEnteredRecipes(user)\n                    refreshRecipes()\n                })\n            }})\n    }\n\n    if (!recipe) {\n        return <div>Loading...</div>\n    }\n\n    return (\n        <Formik \n            initialValues={{\n                name: recipe.name || \"\",\n                directions: recipe.directions || \"\",\n                ingredients: show ? [{ amount: \"\", amount_type: \"\", herb_id: \"\", herb_type: \"\" }] : []\n            }}\n            enableReinitialize={ true }\n            validationSchema={ formSchema }\n            onSubmit={ handleSubmit }\n        >\n        {(formik) => (\n            <div className='container'>\n            <Card fluid className='flex-outer'>\n            <Form>\n                <Card.Content className=\"allCards\" >\n                    <Grid columns={ 2 }>\n                        <Grid.Column>\n                            <FormInputField label='Recipe Name' name='name' type='text' formik={ formik } />\n                        </Grid.Column>\n\n                        <Grid.Column>\n                        <FormTextBoxField label='Directions' name='directions' formik={ formik } />\n                        </Grid.Column>\n                    </Grid>\n\n                    <FieldArray name='ingredients'>\n                    {({ push, remove }) => (\n                        <div>\n                            <FormHeader as='h3'>Existing Ingredients</FormHeader>\n                            <Card.Group>\n                                {ingredients.map((ingredient) => {\n                                    return (\n                                        <IngredientEditCards ingredient={ingredient} deletedIngredients={deletedIngredients} setDeletedIngredients={setDeletedIngredients} />\n                                    )\n                                })}\n                            </Card.Group>\n\n                            {show === true ?\n                            formik.values.ingredients.map((_, index) => {\n                                return (\n                                <div key={ index } >\n                                    <Grid columns={ 2 }>\n                                        <Grid.Column>\n                                        <FormInputField label='Amount' name={`ingredients[${index}].amount`} type='number' formik={ formik } />\n                                            <FormSelectField label='Amount Type' name={`ingredients[${index}].amount_type`} formik={formik} options={amountTypeDrops} />\n                                        </Grid.Column>\n\n                                        <Grid.Column>\n                                        <FormSelectField label='Herb' name={`ingredients[${index}].herb_id`} formik={formik} options={IDDropdowns(herbs)} />\n                                            <FormSelectField label='Herb Type' name={`ingredients[${index}].herb_type`} formik={formik} options={herbTypeDrops} />\n                                        </Grid.Column>\n                                    </Grid>\n                                    <Button  onClick={() => remove(index)}>Remove Ingredient</Button>\n                                    <Button onClick={() => push({ amount: \"\", amount_type: \"\", herb_id:\"\", herb_type:\"\" })}>\n                                    Add another ingredient\n                                    </Button>\n                                </div>\n                            )}) : null }\n                            {show === null ? \n                                <Button onClick={() => {setShow(true)}}>\n                                   Add new ingredients to this recipe <Icon name='add' />\n                                </Button> : null}\n                        </div>\n                    )}\n                    </FieldArray>                       \n                </Card.Content>\n                <Button fluid type='submit'>Submit edits</Button>\n            </Form>\n        </Card>\n        </div>\n    )}\n    </Formik>\n    )\n}\n\nexport default RecipeEdits","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/EditFormHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/context/AppContext.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentRecipe.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentProfile.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentEdits.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/StylingHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/CardHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/GeneralHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/DosageGuide.js",["194","195","196","197"],"import React, { useState, useContext } from 'react'\nimport { Tab, Grid, Header } from 'semantic-ui-react'\nimport { AppContext } from '../context/AppContext';\nimport \"../index.css\"\nimport { dosageTabs } from './helpers/GeneralHelpers';\nimport Capsules from './dosages/Capsules';\nimport Decoctions from './dosages/Decoctions';\nimport Dried from './dosages/Dried';\nimport EssentialOil from './dosages/EssentialOil';\nimport Extracts from './dosages/Extracts';\nimport Fresh from './dosages/Fresh';\nimport Glycerite from './dosages/Glycerite';\nimport Infusions from './dosages/Infusions';\nimport Oil from './dosages/Oil';\nimport Powder from './dosages/Powder';\nimport Salve from './dosages/Salve';\nimport Syrup from './dosages/Syrup';\nimport Tincture from './dosages/Tincture';\nimport Topical from './dosages/Topical';\n\nfunction DosageGuide() {\n    const [activeTab, setActiveTab] = useState('Capsules')\n\n    const panes = [\n        { menuItem: 'Capsules', render: () => dosageTabs(<Capsules />)},\n        { menuItem: 'Decoctions', render: () => dosageTabs(<Decoctions />)},\n        { menuItem: 'Dried', render: () => dosageTabs(<Dried />)},\n        { menuItem: 'Essential Oil', render: () => dosageTabs(<EssentialOil />)},\n        { menuItem: 'Extracts', render: () => dosageTabs(<Extracts />)},\n        { menuItem: 'Fresh', render: () => dosageTabs(<Fresh />)},\n        { menuItem: 'Glycerite', render: () => dosageTabs(<Glycerite />)},\n        { menuItem: 'Infusions', render: () => dosageTabs(<Infusions />)},\n        { menuItem: 'Juice', render: () => dosageTabs(<Capsules />)},\n        { menuItem: 'Oil', render: () => dosageTabs(<Oil />)},\n        { menuItem: 'Powder', render: () => dosageTabs(<Powder />)},\n        { menuItem: 'Salve', render: () => dosageTabs(<Salve />)},\n        { menuItem: 'Syrup', render: () => dosageTabs(<Syrup />)},\n        { menuItem: 'Tincture', render: () => dosageTabs(<Tincture />)},\n        { menuItem: 'Topical', render: () => dosageTabs(<Topical />)}\n    ]\n\n    return (\n        <Tab \n            menu={{ fluid: true, tabular: true, pointing: true }}\n            panes={ panes }\n            activeIndex={ panes.findIndex((pane) => pane.menuItem === activeTab)}\n            onTabChange={(_, data) => setActiveTab(data.panes[data.activeIndex].menuItem)}\n        />\n    )\n}\n\nexport default DosageGuide","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/EssentialOil.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Decoctions.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Capsules.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Fresh.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Extracts.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Dried.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Infusions.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Glycerite.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Powder.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Tincture.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Oil.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Syrup.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Topical.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Salve.js",[],{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","severity":1,"message":"203","line":25,"column":8,"nodeType":"204","endLine":25,"endColumn":12,"suggestions":"205"},{"ruleId":"202","severity":1,"message":"206","line":21,"column":8,"nodeType":"204","endLine":21,"endColumn":24,"suggestions":"207"},{"ruleId":"208","severity":1,"message":"209","line":63,"column":53,"nodeType":"210","messageId":"211","endLine":63,"endColumn":55},{"ruleId":"208","severity":1,"message":"209","line":60,"column":61,"nodeType":"210","messageId":"211","endLine":60,"endColumn":63},{"ruleId":"212","severity":1,"message":"213","line":1,"column":27,"nodeType":"214","messageId":"215","endLine":1,"endColumn":37},{"ruleId":"212","severity":1,"message":"216","line":2,"column":15,"nodeType":"214","messageId":"215","endLine":2,"endColumn":19},{"ruleId":"212","severity":1,"message":"217","line":2,"column":21,"nodeType":"214","messageId":"215","endLine":2,"endColumn":27},{"ruleId":"212","severity":1,"message":"218","line":3,"column":10,"nodeType":"214","messageId":"215","endLine":3,"endColumn":20},"no-native-reassign",["219"],"no-negated-in-lhs",["220"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'herbs'. Either include it or remove the dependency array.","ArrayExpression",["221"],"React Hook useEffect has a missing dependency: 'properties'. Either include it or remove the dependency array.",["222"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'Grid' is defined but never used.","'Header' is defined but never used.","'AppContext' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},"Update the dependencies array to be: [herbs, id]",{"range":"227","text":"228"},"Update the dependencies array to be: [properties, selectedLetter]",{"range":"229","text":"230"},[1056,1060],"[herbs, id]",[833,849],"[properties, selectedLetter]"]