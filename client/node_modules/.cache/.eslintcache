[{"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/index.js":"1","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/App.js":"2","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Authentication.js":"3","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/NavBar.js":"4","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Properties.js":"5","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Home.js":"6","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/PropertyCard.js":"7","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Search.js":"8","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Filter.js":"9","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/ModalPopout.js":"10","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/FormHelpers.js":"11","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/EditFormHelpers.js":"12","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/context/AppContext.js":"13","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/StylingHelpers.js":"14","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/CardHelpers.js":"15","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/GeneralHelpers.js":"16","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/DosageGuide.js":"17","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/EssentialOil.js":"18","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Decoctions.js":"19","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Capsules.js":"20","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Fresh.js":"21","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Extracts.js":"22","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Dried.js":"23","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Infusions.js":"24","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Glycerite.js":"25","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Powder.js":"26","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Tincture.js":"27","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Oil.js":"28","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Syrup.js":"29","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Topical.js":"30","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Salve.js":"31","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herb/Herb.js":"32","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/Context/AppContext.js":"33","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipe/Recipe.js":"34","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Profile/Profile.js":"35","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Helpers/GeneralHelpers.js":"36","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Helpers/FormHelpers.js":"37","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Capsules.js":"38","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Decoctions.js":"39","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Dried.js":"40","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/EssentialOil.js":"41","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Extracts.js":"42","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Fresh.js":"43","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Glycerite.js":"44","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Oil.js":"45","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Topical.js":"46","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Infusions.js":"47","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Powder.js":"48","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Tincture.js":"49","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Helpers/CardHelpers.js":"50","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Syrup.js":"51","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Salve.js":"52","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Helpers/StylingHelpers.js":"53","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Comment/CommentProfile.js":"54","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipe/Recipes.js":"55","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herb/Herbs.js":"56","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipe/RecipeCard.js":"57","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herb/HerbCard.js":"58","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Comment/CommentEdits.js":"59","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipe/RecipeEdits.js":"60","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipe/RecipeForm.js":"61","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herb/HerbEdits.js":"62","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herb/HerbForm.js":"63","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Helpers/EditFormHelpers.js":"64","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Comment/CommentRecipe.js":"65","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Profile/AccountEdits.js":"66","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/comment/CommentProfile.js":"67","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/comment/CommentEdits.js":"68","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/comment/CommentRecipe.js":"69","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/recipe/Recipes.js":"70","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/herb/Herbs.js":"71","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/herb/Herb.js":"72","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/profile/Profile.js":"73","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/recipe/RecipeCard.js":"74","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/profile/AccountEdits.js":"75","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/herb/HerbCard.js":"76","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/recipe/Recipe.js":"77","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/herb/HerbForm.js":"78","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/herb/HerbEdits.js":"79","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/recipe/RecipeForm.js":"80","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/recipe/RecipeEdits.js":"81","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Resorces.js":"82","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/herb/HerbEditHelpers.js":"83"},{"size":245,"mtime":1701464466018,"results":"84","hashOfConfig":"85"},{"size":1884,"mtime":1701738382673,"results":"86","hashOfConfig":"85"},{"size":2700,"mtime":1701477011373,"results":"87","hashOfConfig":"85"},{"size":2357,"mtime":1701663717213,"results":"88","hashOfConfig":"85"},{"size":2920,"mtime":1701477011409,"results":"89","hashOfConfig":"85"},{"size":2121,"mtime":1698940056746,"results":"90","hashOfConfig":"85"},{"size":2088,"mtime":1701477011409,"results":"91","hashOfConfig":"85"},{"size":365,"mtime":1698954606809,"results":"92","hashOfConfig":"85"},{"size":572,"mtime":1698875857546,"results":"93","hashOfConfig":"85"},{"size":2527,"mtime":1701738349429,"results":"94","hashOfConfig":"85"},{"size":4215,"mtime":1701648357694,"results":"95","hashOfConfig":"85"},{"size":17164,"mtime":1701733072195,"results":"96","hashOfConfig":"85"},{"size":5001,"mtime":1701559288005,"results":"97","hashOfConfig":"85"},{"size":1494,"mtime":1701737814130,"results":"98","hashOfConfig":"85"},{"size":4981,"mtime":1701663156648,"results":"99","hashOfConfig":"85"},{"size":2076,"mtime":1701737814130,"results":"100","hashOfConfig":"85"},{"size":2334,"mtime":1701477011389,"results":"101","hashOfConfig":"85"},{"size":140,"mtime":1699908081120,"results":"102","hashOfConfig":"85"},{"size":133,"mtime":1699908081120,"results":"103","hashOfConfig":"85"},{"size":126,"mtime":1699908081120,"results":"104","hashOfConfig":"85"},{"size":118,"mtime":1699908081125,"results":"105","hashOfConfig":"85"},{"size":127,"mtime":1699908081120,"results":"106","hashOfConfig":"85"},{"size":118,"mtime":1699908081120,"results":"107","hashOfConfig":"85"},{"size":130,"mtime":1699908081127,"results":"108","hashOfConfig":"85"},{"size":130,"mtime":1699908081135,"results":"109","hashOfConfig":"85"},{"size":121,"mtime":1699908081135,"results":"110","hashOfConfig":"85"},{"size":127,"mtime":1699908081135,"results":"111","hashOfConfig":"85"},{"size":112,"mtime":1699908081130,"results":"112","hashOfConfig":"85"},{"size":118,"mtime":1699908081135,"results":"113","hashOfConfig":"85"},{"size":124,"mtime":1699908081135,"results":"114","hashOfConfig":"85"},{"size":118,"mtime":1699908081133,"results":"115","hashOfConfig":"85"},{"size":2381,"mtime":1701476973738,"results":"116","hashOfConfig":"85"},{"size":5005,"mtime":1701476973727,"results":"117","hashOfConfig":"85"},{"size":4505,"mtime":1701477011381,"results":"118","hashOfConfig":"85"},{"size":2454,"mtime":1701477011388,"results":"119","hashOfConfig":"85"},{"size":1917,"mtime":1699908081120,"results":"120","hashOfConfig":"85"},{"size":3687,"mtime":1701477081615,"results":"121","hashOfConfig":"85"},{"size":126,"mtime":1699908081120,"results":"122","hashOfConfig":"85"},{"size":133,"mtime":1699908081120,"results":"123","hashOfConfig":"85"},{"size":118,"mtime":1699908081120,"results":"124","hashOfConfig":"85"},{"size":140,"mtime":1699908081120,"results":"125","hashOfConfig":"85"},{"size":127,"mtime":1699908081120,"results":"126","hashOfConfig":"85"},{"size":118,"mtime":1699908081125,"results":"127","hashOfConfig":"85"},{"size":130,"mtime":1699908081135,"results":"128","hashOfConfig":"85"},{"size":112,"mtime":1699908081130,"results":"129","hashOfConfig":"85"},{"size":124,"mtime":1699908081135,"results":"130","hashOfConfig":"85"},{"size":130,"mtime":1699908081127,"results":"131","hashOfConfig":"85"},{"size":121,"mtime":1699908081135,"results":"132","hashOfConfig":"85"},{"size":127,"mtime":1699908081135,"results":"133","hashOfConfig":"85"},{"size":4564,"mtime":1701477011409,"results":"134","hashOfConfig":"85"},{"size":118,"mtime":1699908081135,"results":"135","hashOfConfig":"85"},{"size":118,"mtime":1699908081133,"results":"136","hashOfConfig":"85"},{"size":1310,"mtime":1698247625254,"results":"137","hashOfConfig":"85"},{"size":2078,"mtime":1701477011389,"results":"138","hashOfConfig":"85"},{"size":2758,"mtime":1701477011409,"results":"139","hashOfConfig":"85"},{"size":3283,"mtime":1701477011409,"results":"140","hashOfConfig":"85"},{"size":2742,"mtime":1701477011389,"results":"141","hashOfConfig":"85"},{"size":2957,"mtime":1701477011409,"results":"142","hashOfConfig":"85"},{"size":2178,"mtime":1701477011388,"results":"143","hashOfConfig":"85"},{"size":6626,"mtime":1701477011409,"results":"144","hashOfConfig":"85"},{"size":4260,"mtime":1701477011409,"results":"145","hashOfConfig":"85"},{"size":8861,"mtime":1701477011409,"results":"146","hashOfConfig":"85"},{"size":5374,"mtime":1701477011409,"results":"147","hashOfConfig":"85"},{"size":4431,"mtime":1698959611112,"results":"148","hashOfConfig":"85"},{"size":1042,"mtime":1698878611382,"results":"149","hashOfConfig":"85"},{"size":3341,"mtime":1701536042578,"results":"150","hashOfConfig":"85"},{"size":2397,"mtime":1701635584347,"results":"151","hashOfConfig":"85"},{"size":2178,"mtime":1701477011388,"results":"152","hashOfConfig":"85"},{"size":1162,"mtime":1701635742800,"results":"153","hashOfConfig":"85"},{"size":2759,"mtime":1701560085077,"results":"154","hashOfConfig":"85"},{"size":3283,"mtime":1701738455861,"results":"155","hashOfConfig":"85"},{"size":2417,"mtime":1701663156648,"results":"156","hashOfConfig":"85"},{"size":2665,"mtime":1701635146112,"results":"157","hashOfConfig":"85"},{"size":2742,"mtime":1701477011389,"results":"158","hashOfConfig":"85"},{"size":5428,"mtime":1701657423323,"results":"159","hashOfConfig":"85"},{"size":2957,"mtime":1701477011409,"results":"160","hashOfConfig":"85"},{"size":4505,"mtime":1701477011381,"results":"161","hashOfConfig":"85"},{"size":5374,"mtime":1701477011409,"results":"162","hashOfConfig":"85"},{"size":13113,"mtime":1701738103793,"results":"163","hashOfConfig":"85"},{"size":4260,"mtime":1701477011409,"results":"164","hashOfConfig":"85"},{"size":6626,"mtime":1701477011409,"results":"165","hashOfConfig":"85"},{"size":493,"mtime":1701663717212,"results":"166","hashOfConfig":"85"},{"size":13402,"mtime":1701738103798,"results":"167","hashOfConfig":"85"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},"1ecga3h",{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"170"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"170"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"170"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"170"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"326"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"170"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"170"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"170"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/index.js",[],["344","345"],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/App.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Authentication.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/NavBar.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Properties.js",["346"],"import React, { useContext, useState, useEffect } from 'react'\nimport PropertyCard from './PropertyCard'\nimport { AppContext } from '../context/AppContext';\nimport { Card, Button, Divider } from 'semantic-ui-react'\nimport Search from './Search';\nimport { handleSearches } from './helpers/GeneralHelpers';\n\n\nfunction Properties() {\n    const { properties } = useContext(AppContext)\n    const [searchTerm, setSearchTerm] = useState('');\n    const [searchResults, setSearchResults] = useState([]);\n    const [selectedLetter, setSelectedLetter] = useState('');\n    const [filteredProperties, setFilteredProperties] = useState([]);\n\n    useEffect(() => {\n        const filtered = properties.filter(property =>\n            property.name.charAt(0).toUpperCase() === selectedLetter\n        );\n        setFilteredProperties(filtered);\n    }, [selectedLetter])\n\n    const uniqueFirstLetters = [...new Set(properties.map(property => property.name.charAt(0).toUpperCase()))];\n\n    const letters = uniqueFirstLetters.map((letter) => {\n        return (\n            <Button circular style={{ backgroundColor: '#056d52', color:'white' }} key={ letter }\n            className={ selectedLetter === letter ? 'active' : '' }\n            onClick={() => setSelectedLetter(letter)}>\n                <strong>{letter}</strong>\n            </Button>\n    )})\n\n    const displayedProperties = \n        searchTerm && searchResults.length > 0\n            ? searchResults.map((property) => <PropertyCard property={ property } key={ property.id } />)\n        : searchTerm && searchResults.length === 0\n            ? <h3>No properties match your search.</h3>\n        : selectedLetter && filteredProperties.length > 0\n            ? filteredProperties.map((property) => <PropertyCard property={ property } key={property.id} />)\n        : selectedLetter && filteredProperties.length === 0\n            ? <h3>No properties match your filters.</h3>\n        : properties.map ((property) => <PropertyCard property={ property } key={ property.id }/>)\n\n    return (\n        <div>\n            <h3>Search for properties by name...</h3>\n            <Search \n                onSearch={(searchTerm) => handleSearches(searchTerm, setSearchTerm,properties, setSearchResults)}\n                searchedProperties={ searchResults }\n                searchTerm={ searchTerm }\n            />\n            <Divider />\n            <h3> OR filter properties by first letter</h3>\n            <Button \n                circular \n                style={{ backgroundColor: '#056d52', color:'white' }}\n                className={selectedLetter === '' ? 'active' : ''}\n                onClick={() => setSelectedLetter('')}>\n                <strong>ALL</strong>\n            </Button>\n            {letters}\n            <Divider />\n            <Card.Group itemsPerRow={ 3 }>\n                { displayedProperties }\n            </Card.Group>\n        </div>\n    )\n}\n\nexport default Properties","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Home.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/PropertyCard.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Search.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Filter.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/ModalPopout.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/FormHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/EditFormHelpers.js",["347","348","349","350","351","352"],"import React, { useState } from \"react\"\nimport { Button, Icon, Card, Header, Grid, Modal, Input, Popup, TextArea, Divider } from 'semantic-ui-react'\nimport { StyledInput, StyledTextBox, StyledSelect } from \"./StylingHelpers\"\nimport { displayErrors, dosageDrops } from \"./FormHelpers\"\nimport '../../index.css'\n\nexport function DosageEditCards ({dosage, handleDelete}) {\n    const [editState, setEditState] = useState(\"no edits\")\n\n    // const handleEditBtn = () => {\n    //     setEditState(\"edits\")\n    //     console.log(editState)\n    // }\n\n    // const handleSave = () => {\n    //     handleFieldSubmit(formik.values)\n    //     setEditState(\"no edits\")\n    // }\n\n    // const handleCancel = () => {\n    //     setEditState(\"cancelled\")\n    //     console.log(editState)\n    //     console.log (itemValue)\n    // }\n    // const id = dosage.id\n\n    // const displayOptions = \n    //     editState === \"no edits\" ? formik.values[name] :\n    //     editState === \"cancelled\" ? itemValue :\n    //     null \n    \n    return (\n        <Card className='flex-inner'>\n            <Card.Content>\n                <Grid columns={2}>\n                    <Grid.Column width={8}>\n                        <Header as='h4' textAlign='center' style={{ color: \"black\" }}> Form:</Header>\n                        <p style={{ color: \"black\" }}>{dosage.dosage_form}</p>\n                    </Grid.Column>\n\n                    <Grid.Column width={8}>\n                        <Header as='h4' textAlign='center' style={{ color: \"black\" }}> Description:</Header>\n                        <p style={{ color: \"black\" }}>{dosage.dosage_description}</p>\n\n                    </Grid.Column>\n                </Grid>\n            </Card.Content>\n            <Card.Content>\n                <Popup content='Delete dosage' trigger={<Button icon='trash' onClick={() => {\n                    handleDelete()\n                }}\n                /> } />               \n            </Card.Content>\n        </Card>\n    )\n}\n\nexport function IngredientEditCards ({ ingredient, deletedIngredients, setDeletedIngredients }) {\n    const [deleted, setDeleted] = useState(false)\n    const id = ingredient.id\n\n    const handleDelete = () => {\n        const newList = deletedIngredients.concat({ id })\n        setDeletedIngredients(newList)\n    }\n\n    return (\n        <Card className='flex-inner' style={deleted ? { color: \"white\", background: \"red\" } : null}>\n            <div key={id}>\n            {deleted ? <Header style={{ color: \"black\" }} textAlign='center'>DELETED</Header> : null}\n            <Grid columns={2}>\n                <Grid.Column>\n                    <Header as='h4' style={{ color: \"black\" }} textAlign='center'>Amount</Header>\n                    <p style={{ color: \"black\" }}>{ingredient.amount}</p>\n\n                    <Header as='h4' style={{ color: \"black\" }} textAlign='center'>Amount Type</Header>\n                    <p style={{ color: \"black\" }}>{ingredient.amount_type}</p>\n                </Grid.Column>\n\n                <Grid.Column>\n                    <Header style={{ color: \"black\" }} as='h4' textAlign='center'>Herb</Header>\n                    <p style={{ color: \"black\" }}>{ingredient.herb.name}</p>\n                    <Header style={{ color: \"black\" }} as='h4' textAlign='center'>Herb Type</Header>\n                    <p style={{ color: \"black\" }}>{ingredient.herb_type}</p>\n                </Grid.Column>\n            </Grid>\n                {!deleted ? <Button icon='trash' type='button' onClick={() => {\n                    setDeleted(!deleted)\n                    handleDelete()\n                }}\n                /> : null }\n            </div>\n        </Card>\n    )\n}\n    \nexport function PropertyEditCards ({property, deletedProperties, setDeletedProperties}) {\n    const [deleted, setDeleted] = useState(false)\n    const id = property.id\n    \n    const handleDelete = () => {\n        const newList = deletedProperties.concat({ id })\n        setDeletedProperties(newList)\n    }\n\n    return (\n        <Card fluid className='property-edits' style={deleted ? { color: \"white\", background: \"red\" } : null}>\n            <div key={id}>\n            {deleted ? <Header textAlign='center'>DELETED</Header> : null}\n                <Grid columns={2}>\n                    <Grid.Column width={12}>\n\n                        <Header as='h4' textAlign='center'style={{ padding: '10px',color: \"black\" }}>{property.name}</Header>\n                    </Grid.Column>\n\n                    <Grid.Column width={4}> \n\n                        {!deleted ? <Button fluid icon='trash' type='button' onClick={() => {\n                            setDeleted(!deleted)\n                            handleDelete()\n                        }}\n                        /> : null }\n                    </Grid.Column>\n                </Grid>\n            </div>\n        </Card>\n    )\n}\n\nexport const AllFormEdits = ({ label, name, type, formik, itemValue, handleFieldSubmit, inputType, options = null, handleDelete, deleteOption =  'no', editOptIn = 'yes', isSet = 'no' }) => {\n    const [editState, setEditState] = useState(\"no edits\")\n\n    const handleEditBtn = () => {\n        setEditState(\"edits\")\n        console.log(editState)\n    }\n\n    const handleSave = () => {\n        handleFieldSubmit(formik.values)\n        setEditState(\"no edits\")\n    }\n\n    const handleCancel = () => {\n        setEditState(\"cancelled\")\n        console.log(editState)\n        console.log (itemValue)\n    }\n\n    const displayOptions = \n        editState === \"no edits\" ? formik.values[name] :\n        editState === \"cancelled\" ? itemValue :\n        null \n    \n    const inputTypeDisplays = \n        inputType === \"input\" ? \n            <Input\n                style={{ overflowWrap: 'break-word', width: '100%' }}\n                type={type}\n                id={name}\n                name={name}\n                value={formik.values[name]}\n                onChange={formik.handleChange}\n            /> :\n        inputType === \"textarea\" ?\n            <StyledTextBox\n                style = {{ wrapItem: 'true' }}\n                id={name}\n                as={type}\n                name={name}\n                placeholder={formik.values[name]}\n                onChange={formik.handleChange}\n            /> :\n        inputType === \"select\" ?\n            <StyledSelect \n                classNamePrefix=\"Select\"\n                name={name}\n                options={options}\n                onChange={(selectedOption) => {\n                formik.setFieldValue(name, selectedOption.value)\n            }}\n            /> :\n        inputType === \"nestedInput\" ?\n            <Input\n                style={{ overflowWrap: 'break-word', width: '100%' }}\n                type={type}\n                id={name}\n                name={name}\n                value={itemValue}\n                onChange={formik.handleChange}\n            /> :\n        inputType === 'nestedTextBox' ?\n            <StyledTextBox\n                style = {{ wrapItem: 'true' }}\n                id={name}\n                as={type}\n                name={name}\n                placeholder={itemValue}\n                onChange={formik.handleChange}\n            /> :\n        inputType === \"nestedSelect\" ?\n            <StyledSelect \n                classNamePrefix=\"Select\"\n                name={name}\n                options={options}\n                onChange={(selectedOption) => {\n                formik.setFieldValue(name, selectedOption.value)\n            }}\n            /> :\n            null\n\n\n\n    return (\n        <div style={{  alignItems: 'center' }}>\n            <Grid columns={ 3 }>\n                <Grid.Column width={ 4 }>\n                    <h3  style={{ color: 'black' }}>{ label }</h3>\n                </Grid.Column>\n                <Grid.Column width={ 9 } >\n                    {editState === \"edits\" ? (\n                        <>\n                            {inputTypeDisplays}\n                            {displayErrors(formik.errors[name])}\n                        </>\n                    ) : (\n                        <h3  \n                            style = {{ \n                                border: '1px solid #056d52', \n                                background:'white', \n                                color:'black', \n                                padding: \"5px\", \n                                whiteSpace:'nowrap',\n                                overflow:'hidden',\n                                textOverflow:'ellipsis'\n                            }}\n                        >\n                            { displayOptions }\n                        </h3>\n                    )}\n                </Grid.Column>\n                <Grid.Column width={ 3 }>\n                    {editState === \"edits\" ? (\n                        <>\n                        {isSet === 'no' ? \n                        <>\n                        <Popup content='Cancel edits' trigger={<Button onClick={handleCancel} icon='cancel' />} />\n                        <Popup content='Save changes' trigger={<Button icon='save' onClick={handleSave} />} />\n                        </>\n                        : null }\n                        </>\n                        \n                    ) : (\n                        <>\n                        {editOptIn === 'no' ? null :\n                        <>\n                        <Popup content='Edit' trigger={<Button onClick={handleEditBtn} icon='edit' />} />\n                        {deleteOption === 'yes' ? \n                        <Popup content='Delete' trigger= {<Button onClick={handleDelete} icon='trash'/> } /> : null}\n                        </>}\n                        </>\n                    )}\n                </Grid.Column>\n            </Grid>\n        </div>\n    )\n}\n\nexport const DosageAdditions = ({ formik, handleSubmit, showFalse }) => {\n     const [inputFields, setInputFields] = useState([\n        {dosage_form: '', dosage_description: ''}\n     ])\n\n     const addFields = () => {\n        let newField = {dosage_form: '', dosage_description: ''}\n        setInputFields([...inputFields, newField])\n     }\n\n     const removeFields = (index) => {\n        let data = [...inputFields]\n        console.log(data.length)\n        if (data.length > 1) { \n            data.splice(index,1)\n            setInputFields(data) \n        } else {\n            console.log('error, cant remove button')\n            showFalse()\n        }\n     }\n\n     const handleSave = (index) => {\n        handleSubmit(formik.values)\n        removeFields(index)\n     }\n    return (\n        <>\n        {inputFields.map((_, index) => {\n            return (\n                <div key={index}>\n                    <Grid columns={3}>\n                        <Grid.Column width={4}>\n\n                    \n                    <h3  style={{ color: 'black' }}>Form:</h3> \n                    <br/>\n                    <StyledSelect \n                        classNamePrefix=\"Select\"\n                        name='dosage_form'\n                        options={dosageDrops}\n                        placeholder='Select dosage form...'\n                        onChange={(selectedOption) => {\n                            formik.setFieldValue('dosage_form', selectedOption.value)\n                        }}\n                    />\n                    </Grid.Column>\n                        <Grid.Column width={9}>\n\n                        \n                    <h3  style={{ color: 'black' }}>Description:</h3>\n                    <br/>\n                    <StyledTextBox\n                        style = {{ wrapItem: 'true' }}\n                        as='textarea'\n                        name='dosage_description'\n                        placeholder='Enter a dosage description...'\n                        value={formik.values['dosage_description']}\n                        onChange={formik.handleChange}\n                    />\n                    </Grid.Column>\n                        <Grid.Column width={3}>\n                            \n                        \n                <br />\n                    <Popup content='Save changes' trigger={<Button fluid icon='save' onClick={handleSave} />} />\n                    <br/>\n                    <Popup content='Delete new addition' trigger={<Button fluid icon='cancel' onClick={ () => removeFields()} /> } />\n                    </Grid.Column>\n                    </Grid>\n                </div>\n            )\n        })}\n        <br />\n                            <Divider fitted />\n                            <br/>\n        <Button centered fluid icon='plus' onClick={addFields}>Add more</Button>\n        </>\n    )\n}\n\nexport const DosageChanges = ({ dosage, type, formik, handleFieldSubmit, handleDelete }) => {\n    const [editState, setEditState] = useState(\"no edits\")\n\n    const handleEditBtn = () => {\n        setEditState(\"edits\")\n        console.log(editState)\n    }\n\n    const handleSave = () => {\n        handleFieldSubmit(formik.values)\n        setEditState(\"no edits\")\n    }\n\n    const handleCancel = () => {\n        setEditState(\"cancelled\")\n        console.log(editState)\n        console.log ({dosage})\n    }\n    const deleteCall = () => {\n        console.log({dosage})\n        handleDelete({dosage})\n    }\n\n    return (\n        <div style={{  alignItems: 'center' }}>\n            <Grid columns = {3}>\n                <Grid.Column width={4}>\n                    <h3  style={{ color: 'black' }}>Form:</h3> \n                        {editState === \"edits\" ? (\n                            <>\n                                <StyledSelect \n                                    classNamePrefix=\"Select\"\n                                    name='dosage_form'\n                                    options={dosageDrops}\n                                    placeholder={formik.values['dosage_form']}\n                                    onChange={(selectedOption) => {\n                                    formik.setFieldValue('dosage_form', selectedOption.value)\n                                    }}\n                                />\n                                {displayErrors(formik.errors['dosage_form'])}\n                            </>\n                        ) : (\n                            <h3  \n                                style = {{ \n                                    border: '1px solid #056d52', \n                                    background:'white', \n                                    color:'black', \n                                    padding: \"5px\", \n                                    whiteSpace:'nowrap',\n                                    overflow:'hidden',\n                                    textOverflow:'ellipsis'\n                                }}\n                            >\n                                {formik.values['dosage_form']}\n                            </h3>\n                        )}\n                </Grid.Column>\n                <Grid.Column width = {9}>\n                    <h3  style={{ color: 'black' }}>Description:</h3>\n                        {editState === \"edits\" ? (\n                            <>\n                                <StyledTextBox\n                                    style = {{ wrapItem: 'true' }}\n                                    as={type}\n                                    name='dosage_description'\n                                    value={formik.values['dosage_description']}\n                                    onChange={formik.handleChange}\n                                />\n                                {displayErrors(formik.errors['dosage_description'])}  \n                            </>\n                        ) : (\n                            <h3  \n                                style = {{ \n                                    border: '1px solid #056d52', \n                                    background:'white', \n                                    color:'black', \n                                    padding: \"5px\", \n                                    whiteSpace:'nowrap',\n                                    overflow:'hidden',\n                                    textOverflow:'ellipsis'\n                                }}\n                            >\n                                {dosage.dosage_description}\n                            </h3>\n                        )}\n                </Grid.Column>\n                <Grid.Column width={3}>\n                    {editState === \"edits\" ? (\n                        <div style={{  alignItems: 'center' }}>\n                            <Popup content='Cancel edits' trigger={<Button onClick={handleCancel} icon='cancel' />} />\n                            <br/>\n                            <br/>\n                            <Popup content='Save changes' trigger={<Button icon='save' onClick={handleSave} />} />\n                            </div>\n                    ) : (\n                        <>\n                            <Button fluid onClick={handleEditBtn} icon='edit'>Edit</Button>\n                            <br/>\n                            <Button fluid onClick={deleteCall} icon='trash'>Delete</Button>\n                            </>\n                    )}\n                </Grid.Column>\n            </Grid>\n        </div>\n    )\n}\n","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/context/AppContext.js",["353"],"import React, { createContext, useState, useEffect } from \"react\";\nimport { basicFetch, filterAlphabetically } from \"../components/helpers/GeneralHelpers\";\n\n\nconst AppContext = createContext({});\n\nconst AppProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  const [herbs, setHerbs] = useState([]);\n  const [savedHerbs, setSavedHerbs] = useState([]);\n  const [enteredHerbs, setEnteredHerbs] = useState([]);\n\n  const [recipes, setRecipes] = useState([]);\n  const [savedRecipes, setSavedRecipes] = useState([]);\n  const [enteredRecipes, setEnteredRecipes] = useState([])\n\n  const [properties, setProperties] = useState([]);\n  const [secondOpen, setSecondOpen] = useState(false)\n\n  const [enteredComments, setEnteredComments] = useState([])\n  \n  // Login/Sign Up/Log Out Context\n\n\n  const checkSession = () => {\n    fetch('/api/checksession')\n    .then(resp => {\n      if(resp.ok){\n        resp.json()\n        .then(data => {\n          setUser(data)\n          console.log(data)\n        })\n    }}\n    )}\n\n\n  const handleLogin = (user) => {\n      setUser(user);\n    //herb data fetches\n      basicFetch(\"/api/herbs\", setHerbs, filterAlphabetically);\n      basicFetch(`/api/users/${user.id}/saved-herbs`, setSavedHerbs, filterAlphabetically);\n      setEnteredHerbs(filterAlphabetically(user.entered_herbs));\n      //recipe data fetches\n      basicFetch(\"/api/recipes\", setRecipes, filterAlphabetically);\n      basicFetch(`/api/users/${user.id}/saved-recipes`, setSavedRecipes, filterAlphabetically);\n      setEnteredRecipes(filterAlphabetically(user.entered_recipes));\n      //property fetches\n      basicFetch(\"/api/properties\", setProperties, filterAlphabetically);\n      basicFetch(`/api/users/${user.id}/comments`, setEnteredComments)\n      setLoggedIn(true);\n};\n\n\n  const logout = () => {\n    setUser(null);\n    setLoggedIn(false)\n  };\n\n  // Properties Context\n\n  const refreshProperties = () => {\n    basicFetch(\"/api/properties\", setProperties, filterAlphabetically)\n  }\n\n  // Herbs Context\n\n  const refreshEnteredHerbs = (user) => {\n    fetch(`/api/users/${user.id}`)\n    .then((resp) => resp.json())\n    .then ((data) => {\n      setEnteredHerbs(filterAlphabetically(data.entered_herbs))\n    })\n    .then(refreshProperties())\n  }\n\n  const refreshHerbs = () => {\n    basicFetch(\"/api/herbs\", setHerbs, filterAlphabetically)\n    refreshProperties()\n  }\n\n  const refreshSavedHerbs = (user) => {\n    fetch(`/api/users/${user.id}/saved-herbs`)\n    .then((resp) => {\n      if(resp.ok) {\n        resp.json().then((data) => setSavedHerbs(filterAlphabetically(data)))\n      }\n    })\n  }\n\n  //Recipe Context\n\n  const refreshEnteredRecipes = (user) => {\n    fetch(`/api/users/${user.id}`)\n    .then((resp) => resp.json())\n    .then ((data) => {\n      setEnteredRecipes(filterAlphabetically(data.entered_recipes))\n    })\n    .then(refreshProperties())    \n  }\n\n  const refreshRecipes = () => {\n    basicFetch('/api/recipes', setRecipes, filterAlphabetically)\n    refreshProperties()\n  }\n\n  const refreshSavedRecipes = (user) => {\n    fetch(`/api/users/${user.id}/saved-recipes`)\n    .then((resp) => {\n      if(resp.ok) {\n        resp.json().then((data) => setSavedRecipes(filterAlphabetically(data)))\n      }\n    })\n  }\n\n  //Comments Context\n\n  const refreshEnteredComments = (user) => {\n    basicFetch(`/api/users/${user.id}/comments`, setEnteredComments)\n  }\n\n  const refreshComments = (user) => {\n    basicFetch(\"/api/recipes\", setRecipes, filterAlphabetically);\n    basicFetch(`/api/users/${user.id}/comments`, setEnteredComments)\n  }\n\n    const handleModalSuccess = () => {\n        setSecondOpen(!secondOpen)\n    }\n\n\n  return (\n    <AppContext.Provider value={{\n        user, //CommentEdits, CommentProfile, HerbCard, HerbEdits, HerbForm, Profile, RecipeCard, RecipeEdits, RecipeForm\n        handleLogin, //Authentication\n        logout, // NavBar\n        loggedIn, // NavBar\n        checkSession,\n        //herbs \n        herbs, // Herbs, PropertyCard, RecipeEdits, RecipeForm\n        savedHerbs, // HerbCard, Herbs, Profile\n        enteredHerbs, // Herbs, Profile\n        refreshEnteredHerbs, // HerbEdits, HerbForm\n        refreshHerbs, // HerbEdits, HerbForm\n        refreshSavedHerbs, // HerbCard\n        //recipes\n        recipes, // PropertyCard, Recipes\n        savedRecipes, // Profile, RecipeCard, Recipes\n        enteredRecipes, // Profile, Recipes\n        refreshEnteredRecipes, // RecipeEdits, RecipeForm\n        refreshRecipes, // RecipeEdits, RecipeForm\n        refreshSavedRecipes, //RecipeCard\n        properties, // HerbEdits, HerbForm, Herbs, Recipes\n        enteredComments, // Profile\n        refreshEnteredComments,//CommentEdits, CommentProfile\n        refreshComments,\n        handleModalSuccess, //CommentEdits, HerbEdits, HerbForm, ModalPopout, RecipeEdits, RecipeForm\n        secondOpen, // ModalPopout\n    }}\n    >\n        {children}\n    </AppContext.Provider>\n  );\n};\n\nexport { AppContext, AppProvider }","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/StylingHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/CardHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/GeneralHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/DosageGuide.js",["354","355","356","357"],"import React, { useState, useContext } from 'react'\nimport { Tab, Grid, Header } from 'semantic-ui-react'\nimport { AppContext } from '../context/AppContext';\nimport \"../index.css\"\nimport { dosageTabs } from './helpers/GeneralHelpers';\nimport Capsules from './dosages/Capsules';\nimport Decoctions from './dosages/Decoctions';\nimport Dried from './dosages/Dried';\nimport EssentialOil from './dosages/EssentialOil';\nimport Extracts from './dosages/Extracts';\nimport Fresh from './dosages/Fresh';\nimport Glycerite from './dosages/Glycerite';\nimport Infusions from './dosages/Infusions';\nimport Oil from './dosages/Oil';\nimport Powder from './dosages/Powder';\nimport Salve from './dosages/Salve';\nimport Syrup from './dosages/Syrup';\nimport Tincture from './dosages/Tincture';\nimport Topical from './dosages/Topical';\n\nfunction DosageGuide() {\n    const [activeTab, setActiveTab] = useState('Capsules')\n\n    const panes = [\n        { menuItem: 'Capsules', render: () => dosageTabs(<Capsules />)},\n        { menuItem: 'Decoctions', render: () => dosageTabs(<Decoctions />)},\n        { menuItem: 'Dried', render: () => dosageTabs(<Dried />)},\n        { menuItem: 'Essential Oil', render: () => dosageTabs(<EssentialOil />)},\n        { menuItem: 'Extracts', render: () => dosageTabs(<Extracts />)},\n        { menuItem: 'Fresh', render: () => dosageTabs(<Fresh />)},\n        { menuItem: 'Glycerite', render: () => dosageTabs(<Glycerite />)},\n        { menuItem: 'Infusions', render: () => dosageTabs(<Infusions />)},\n        { menuItem: 'Juice', render: () => dosageTabs(<Capsules />)},\n        { menuItem: 'Oil', render: () => dosageTabs(<Oil />)},\n        { menuItem: 'Powder', render: () => dosageTabs(<Powder />)},\n        { menuItem: 'Salve', render: () => dosageTabs(<Salve />)},\n        { menuItem: 'Syrup', render: () => dosageTabs(<Syrup />)},\n        { menuItem: 'Tincture', render: () => dosageTabs(<Tincture />)},\n        { menuItem: 'Topical', render: () => dosageTabs(<Topical />)}\n    ]\n\n    return (\n        <Tab \n            menu={{ fluid: true, tabular: true, pointing: true }}\n            panes={ panes }\n            activeIndex={ panes.findIndex((pane) => pane.menuItem === activeTab)}\n            onTabChange={(_, data) => setActiveTab(data.panes[data.activeIndex].menuItem)}\n        />\n    )\n}\n\nexport default DosageGuide","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/EssentialOil.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Decoctions.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Capsules.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Fresh.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Extracts.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Dried.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Infusions.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Glycerite.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Powder.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Tincture.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Oil.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Syrup.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Topical.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/dosages/Salve.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herb/Herb.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/Context/AppContext.js",["358"],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipe/Recipe.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Profile/Profile.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Helpers/GeneralHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Helpers/FormHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Capsules.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Decoctions.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Dried.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/EssentialOil.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Extracts.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Fresh.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Glycerite.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Oil.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Topical.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Infusions.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Powder.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Tincture.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Helpers/CardHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Syrup.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Dosages/Salve.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Helpers/StylingHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Comment/CommentProfile.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipe/Recipes.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herb/Herbs.js",["359"],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipe/RecipeCard.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herb/HerbCard.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Comment/CommentEdits.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipe/RecipeEdits.js",["360"],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipe/RecipeForm.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herb/HerbEdits.js",["361"],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herb/HerbForm.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Helpers/EditFormHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Comment/CommentRecipe.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Profile/AccountEdits.js",["362","363","364","365"],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/comment/CommentProfile.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/comment/CommentEdits.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/comment/CommentRecipe.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/recipe/Recipes.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/herb/Herbs.js",["366"],"import React, { useState, useContext, useEffect } from 'react'\nimport { Card, Grid, Divider } from 'semantic-ui-react'\nimport { useParams } from 'react-router-dom'\nimport { AppContext } from '../../context/AppContext'\nimport { handleSearches, handleFilterChange } from '../helpers/GeneralHelpers'\nimport HerbCard from './HerbCard'\nimport Search from '../Search'\nimport Filter from '../Filter'\nimport ModalPopout from '../ModalPopout'\nimport \"../../index.css\"\n\nfunction Herbs({ page }) {\n    const { id } = useParams()\n    const { properties, herbs, savedHerbs, enteredHerbs } = useContext(AppContext)\n\n    const [searchResults, setSearchResults] = useState([]);\n    const [filteredHerbs, setFilteredHerbs] = useState([])\n    const [selectedProperties, setSelectedProperties] = useState([]);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [propertyHerbs, setPropertyHerbs] = useState([])\n\n    useEffect(() => {\n        const list = herbs.filter((herb) => herb.properties.some((property) => property.id === id))\n        setPropertyHerbs(list)\n    }, [id])\n    \n    const herbsList = \n        page === 'home' ? herbs :\n        page === 'profile - saved' ? savedHerbs :\n        page === 'profile - entered' ? enteredHerbs :\n        page === 'properties' ? propertyHerbs :\n        null\n\n    const displayedHerbs = \n        searchTerm && searchResults.length > 0 ? searchResults.map((herb) => <HerbCard key={herb.id} herb={herb} page={page}/>) :\n        searchTerm && searchResults.length === 0 ? <h3>No herbs match your search.</h3> :\n        selectedProperties.length > 0 && filteredHerbs.length > 0 ? filteredHerbs.map((herb) => <HerbCard key={herb.id} herb={herb} page={page}/>) :\n        selectedProperties.length > 0 && filteredHerbs.length === 0 ? <h3>No herbs match your filter.</h3> : \n        id && propertyHerbs.length > 0 ? propertyHerbs.map((herb) => <HerbCard key={herb.id} herb={herb} />) :\n        id && propertyHerbs.length === 0 ? <h3>No herbs have this property.</h3> :\n        herbsList.map((herb) => <HerbCard key={herb.id} herb={herb} page={page}/>);\n\n    return (\n        <div>\n            <ModalPopout modalType='new herb' msg='Add a new herb' />\n            <Divider />\n            <Grid columns={ 2 }>\n                <Grid.Column>\n                    <h3>Search for herbs by name...</h3>\n                    <Search \n                        onSearch={(searchTerm) => handleSearches(searchTerm, setSearchTerm, herbsList, setSearchResults)} \n                        searchedHerbs={ searchResults }\n                        searchTerm = { searchTerm }\n                    />\n                </Grid.Column>\n\n                <Grid.Column>\n                    <h3> OR filter herbs by their properties</h3>\n                    <Filter \n                        onFilterChange={(selectedProperties) => handleFilterChange(selectedProperties, setSelectedProperties, herbsList, setFilteredHerbs)}\n                        selectedProperties={ selectedProperties } \n                        properties={ properties }\n                    />\n                </Grid.Column>\n            </Grid>\n            <br />\n            <Card.Group itemsPerRow={ 4 } >\n                { displayedHerbs }\n            </Card.Group>\n        </div>\n    )\n}\n\nexport default Herbs\n\n","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/herb/Herb.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/profile/Profile.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/recipe/RecipeCard.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/profile/AccountEdits.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/herb/HerbCard.js",[],["367","368"],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/recipe/Recipe.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/herb/HerbForm.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/herb/HerbEdits.js",["369","370"],"import React, { useContext, useEffect, useState } from \"react\"\nimport {  Formik, Form, FieldArray, Field } from \"formik\"\nimport * as yup from \"yup\"\nimport { AppContext } from \"../../context/AppContext\"\nimport { Card, Grid, Image, Icon, Button, Divider, Modal } from 'semantic-ui-react'\nimport { PropertyEditCards, AllFormEdits, DosageAdditions, DosageChanges } from \"./HerbEditHelpers\"\nimport { FormHeader } from \"../helpers/StylingHelpers\"\nimport { IDDropdowns, FormMultiSelectField} from \"../helpers/FormHelpers\"\nimport { headers, basicFetch, dividerBreaks } from \"../helpers/GeneralHelpers\"\nimport '../../index.css'\n\n\nfunction HerbEdits ({ id }) {\n    const { properties, user, refreshEnteredHerbs, refreshHerbs } = useContext(AppContext)\n    const [herb, setHerb] = useState(null)\n    const [dosages, setDosages] = useState([])\n    const [deletedProperties, setDeletedProperties] = useState([])\n    const [show, setShow] = useState(false)\n    const [open, setOpen] = useState(false)\n\n    useEffect(() => {\n        basicFetch(`/api/herbs/${id}`, setHerb)\n        basicFetch(`/api/herbs/${id}/dosages`, setDosages)\n    }, [id])\n\n    const SuccessModal = () => {\n        return (\n            <Modal\n              onClose={() => setOpen(false)}\n              open={open}\n            >\n              <Modal.Header>Success!</Modal.Header>\n            </Modal>\n        )\n    }\n\n    const formSchema = yup.object().shape({\n        name: yup.string().required(\"Herb name is required.\"),\n        latin_name: yup.string().required(\"Latin name is required.\"),\n        description: yup.string().required(\"Herb description is required.\"),\n        warnings: yup.string().required(\"Herb warnings are required. 'None' is acceptable if herb has no known warnings.\"),\n        image_url: yup.string().required(\"Image url link is required.\"),\n        property_ids: yup.array().required(\"At least one property must be added to your herb.\").min(1, \"At least one property must be added to your herb.\")\n    })\n\n    const dosageSchema = yup.object().shape({\n        dosage_form: yup.string(),\n        dosage_description: yup.string()\n    })\n\n    const successFunctions = (user) => {\n        basicFetch(`/api/herbs/${id}`, setHerb)\n        basicFetch(`/api/herbs/${id}/dosages`, setDosages)\n        refreshEnteredHerbs(user)\n        refreshHerbs()\n        SuccessModal()\n    }\n\n    const PatchRequest = (values, name) => {\n        const updatedInfo = {\n            [name]:values[name]\n        }\n        console.log('patch: ', updatedInfo, 'name: ', name)\n        fetch(`api/herbs/${id}`, {\n            method: 'PATCH', \n            headers, \n            body: JSON.stringify(updatedInfo, null, 2)\n        }).then((resp) => {\n            if (resp.ok) {\n                resp.json().then((data) => {\n                    successFunctions(user)\n                })\n            }\n        })\n    }\n    const handlePropertiesSubmit = (values) => {\n        const propertyIdsToRemove = deletedProperties.map((property) => property.id);\n        const updatedProperties = values.property_ids.filter((propertyID)=> !propertyIdsToRemove.includes(propertyID))\n\n        const updatedInfo={\n            property_ids: updatedProperties\n        }\n        console.log(updatedInfo)\n        fetch(`api/herbs/${id}`, {\n            method: 'PATCH', \n            headers, \n            body: JSON.stringify(updatedInfo, null, 2)\n        }).then((resp) => {\n            if (resp.ok) {\n                resp.json().then((data) => {\n                    successFunctions(user)\n                })\n            }\n        })\n    }\n\n    const DeleteRequest = ({dosage}) => {\n        console.log({dosage})\n        fetch(`/api/herbs/${id}/dosages/${dosage.id}`, {\n            method: 'DELETE'\n        }).then(() => {\n            successFunctions(user)\n        })\n    }\n\n    const DosageChangeRequest = ({ values, type , dosageId= null}) => {\n        const newDosage = {\n            dosage_form: values.dosage_form,\n            dosage_description: values.dosage_description\n        }\n        console.log(newDosage, type, 'dosage id: ', dosageId)\n        fetch(type === 'post' ? `api/herbs/${id}/dosages` : `api/herbs/${id}/dosages/${dosageId}`, {\n            method: type === 'post' ? 'POST': 'PATCH', \n            headers, \n            body: JSON.stringify(newDosage, null, 2)\n        }).then((resp) => {\n            if (resp.ok) {\n                resp.json().then(() => {\n                    successFunctions(user)\n                })\n            }\n        })\n    }\n\n    const showFalse = () => {\n        setShow(false)}\n    const showTrue = () => {\n        setShow(true)}\n\n    if (!herb) {\n        return <div>Loading...</div>\n    }\n\n    return (\n        <>\n        <Formik\n            initialValues={{\n                name: herb.name || \"\",\n                latin_name: herb.latin_name || \"\",\n                description: herb.description || \"\",\n                warnings: herb.warnings || \"\",\n                image_url: herb.image_url || \"\",\n                property_ids: herb.properties.map((property) => property.id) || []\n            }}\n            enableReinitialize = { true }\n            validationSchema={ formSchema }\n        >\n        {(formik) => (\n            <Card fluid>\n                <Form>\n                    <Card.Content style={{ padding: '15px'}}>\n                        <Grid columns={ 2 }>\n                            <Grid.Column width={9}>\n                                <br />\n                            <AllFormEdits  \n                                itemValue={herb.name}\n                                name='name' \n                                type='text'\n                                inputType='input' \n                                formik={ formik } \n                                label='Herb Name:'\n                                handleFieldSubmit={(values) => PatchRequest(values, 'name')}\n                            />\n                            <br />\n                            <AllFormEdits  \n                                itemValue={herb.latin_name}\n                                name='latin_name' \n                                type='text' \n                                inputType='input'\n                                formik={ formik } \n                                label='Latin Name:'\n                                handleFieldSubmit={(values) => PatchRequest(values, 'latin_name')}\n                            />\n                            <AllFormEdits  \n                                    itemValue={herb.image_url}\n                                    name='image_url' \n                                    type='textarea' \n                                    inputType='textarea'\n                                    formik={ formik } \n                                    label='Image Link:'\n                                    handleFieldSubmit={(values) => PatchRequest(values, 'image_url')}\n                                />\n                            </Grid.Column>\n                            <Grid.Column width={6}>\n                                <FormHeader as='h3' textAlign='center'>Current Image</FormHeader>\n                                <Image \n                                    size='medium'\n                                    centered\n                                    src={formik.values.image_url}\n                                />\n                            </Grid.Column>\n                        </Grid>\n                            {dividerBreaks}\n                            <AllFormEdits  \n                                itemValue={herb.description}\n                                name='description' \n                                type='textarea' \n                                inputType='textarea'\n                                formik={ formik } \n                                label='Description:'\n                                handleFieldSubmit={(values) => PatchRequest(values, 'description')}\n                            />\n                            <AllFormEdits  \n                                itemValue={herb.warnings}\n                                name='warnings' \n                                type='textarea' \n                                inputType='textarea'\n                                formik={ formik } \n                                label='Warnings:'\n                                handleFieldSubmit={(values) => PatchRequest(values, 'warnings')}\n                            />\n                            {dividerBreaks}\n                        <FieldArray name='property_ids'>\n                            <div>\n                                <Grid columns={2}>\n                                    <Grid.Column>\n                                        <FormHeader as='h3'>Existing Properties</FormHeader>\n                                            <Card.Group>\n                                                {herb.properties.map((property) => {\n                                                    return (\n                                                        <PropertyEditCards property={ property } deletedProperties={ deletedProperties } setDeletedProperties={ setDeletedProperties } />\n                                                        )\n                                                    })}\n                                            </Card.Group>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <FormMultiSelectField label='Add Properties' name='property_ids' formik={ formik } options={ IDDropdowns(properties) } />\n                                        <br/>\n                                        <Button icon='save' onClick={(values) => handlePropertiesSubmit(values)}>Save property changes</Button>\n                                    </Grid.Column>\n                                </Grid>\n                            </div>\n                        </FieldArray>\n                    </Card.Content>\n                </Form>\n            </Card>\n        )}\n        </Formik>\n        <Card fluid>\n                <Card.Content style={{ padding: '15px'}}>\n                    <FormHeader as='h3'>Existing Dosages</FormHeader>\n                    {dividerBreaks}\n                    {dosages.length > 0 ? \n                        <>\n                        {dosages.map((dosage) => (\n                            <Formik \n                                key={dosage.id}\n                                initialValues={{\n                                    dosage_form: dosage.dosage_form ,\n                                    dosage_description: dosage.dosage_description\n                                }}\n                                enableReinitialize= { true }\n                                validationSchema={ dosageSchema }\n                            >\n                            {(formik) => (\n                                <Form>\n                                    <DosageChanges \n                                        dosage={dosage} \n                                        type='textarea' \n                                        formik={formik} \n                                        handleFieldSubmit={(values)=> DosageChangeRequest({values, type:'patch', dosageId: dosage.id})} \n                                        handleDelete={({dosage}) => DeleteRequest({dosage})} \n                                    />\n                                    {dividerBreaks}\n                                </Form>\n                            )}\n                            </Formik>\n                        ))}\n                        </> : \n                            <h3 className='allCards'>No dosages have been entered.</h3>\n                    }\n\n                        <Formik \n                            initialValues={{\n                                dosage_form: \"\", \n                                dosage_description: \"\"\n                            }}\n                            enableReinitialize={true}\n                            validationSchema={dosageSchema}\n                        >\n                            {(formik) => (\n                                <Form>\n                                {show === false ? \n                                    <Button onClick={showTrue} fluid>\n                                   Add new dosages to this herb <Icon name='add' />\n                                    </Button> : \n                                    <DosageAdditions \n                                        formik={ formik }\n                                        handleSubmit={ (values) => DosageChangeRequest({values, type:'post'})} \n                                        showFalse={showFalse} \n                                        showTrue={showTrue}\n                                    />\n                                }\n                                </Form>\n                            )}\n                        </Formik>                   \n                </Card.Content>     \n            </Card>\n        </>\n    )\n}\n\n\nexport default HerbEdits\n","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/recipe/RecipeForm.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/recipe/RecipeEdits.js",["371"],"import React, { useContext, useEffect, useState } from \"react\"\nimport { Formik, Form, FieldArray } from \"formik\"\nimport * as yup from \"yup\"\nimport { AppContext } from '../../context/AppContext'\nimport { Card, Grid, Button, Icon } from 'semantic-ui-react'\nimport { IngredientEditCards } from \"../helpers/EditFormHelpers\"\nimport { FormHeader } from \"../helpers/StylingHelpers\"\nimport { IDDropdowns, amountTypeDrops, herbTypeDrops, FormInputField, FormTextBoxField, FormSelectField } from \"../helpers/FormHelpers\"\nimport { headers } from \"../helpers/GeneralHelpers\"\n\n\nfunction RecipeEdits ({ id }) {\n    const { handleModalSuccess, user, herbs, refreshRecipes, refreshEnteredRecipes } = useContext(AppContext)\n    const [recipe, setRecipe] = useState(null)\n    const [deletedIngredients, setDeletedIngredients] = useState([])\n    const [show, setShow] = useState(null)\n    const [ingredients, setIngredients] = useState([])\n\n    useEffect(() => {\n        fetch(`/api/recipes/${id}`)\n        .then ((resp) => resp.json())\n        .then ((data) => {\n            setRecipe(data)\n        })\n    }, [id])\n\n    useEffect(() => {\n        fetch(`/api/recipes/${id}/ingredients`)\n        .then((resp) => resp.json())\n        .then((data) => setIngredients(data))\n      }, [id])\n\n    const formSchema = yup.object().shape({\n        name: yup.string().required(\"Herb name is required.\"),\n        directions: yup.string().min(50, \"Directions must be at least 50 characters.\").required(\"Directions are required.\"),\n        ingredients : yup.array().of(\n            yup.object().shape({\n                amount: yup.number(),\n                amount_type: yup.string(),\n                herb_type: yup.string(),\n                herb_id: yup.string()\n            })\n        ).min(1, 'At least one ingredient is required.')\n    })\n\n    const handleSubmit = (values) => {\n        const updatedRecipe = {\n            name: values.name, \n            directions: values.directions, \n            ingredients: values.ingredients\n        }\n        fetch(`/api/recipes/${id}`, {\n            method:'PATCH',\n            headers,\n            body: JSON.stringify(updatedRecipe, null, 2)\n        }).then((resp) => {\n            if(resp.ok) {\n                resp.json().then((data) => {\n                    if (deletedIngredients.length > 0) {\n                        deletedIngredients.map((ingredient) => {\n                            fetch(`/api/recipes/${recipe.id}/ingredients/${ingredient.id}`, {\n                                method:'DELETE'\n                        })})\n                    }\n                    handleModalSuccess()\n                    refreshEnteredRecipes(user)\n                    refreshRecipes()\n                })\n            }})\n    }\n\n    if (!recipe) {\n        return <div>Loading...</div>\n    }\n\n    return (\n        <Formik \n            initialValues={{\n                name: recipe.name || \"\",\n                directions: recipe.directions || \"\",\n                ingredients: show ? [{ amount: \"\", amount_type: \"\", herb_id: \"\", herb_type: \"\" }] : []\n            }}\n            enableReinitialize={ true }\n            validationSchema={ formSchema }\n            onSubmit={ handleSubmit }\n        >\n        {(formik) => (\n            <div className='container'>\n            <Card fluid className='flex-outer'>\n            <Form>\n                <Card.Content className=\"allCards\" >\n                    <Grid columns={ 2 }>\n                        <Grid.Column>\n                            <FormInputField label='Recipe Name' name='name' type='text' formik={ formik } />\n                        </Grid.Column>\n\n                        <Grid.Column>\n                        <FormTextBoxField label='Directions' name='directions' formik={ formik } />\n                        </Grid.Column>\n                    </Grid>\n\n                    <FieldArray name='ingredients'>\n                    {({ push, remove }) => (\n                        <div>\n                            <FormHeader as='h3'>Existing Ingredients</FormHeader>\n                            <Card.Group>\n                                {ingredients.map((ingredient) => {\n                                    return (\n                                        <IngredientEditCards ingredient={ingredient} deletedIngredients={deletedIngredients} setDeletedIngredients={setDeletedIngredients} />\n                                    )\n                                })}\n                            </Card.Group>\n\n                            {show === true ?\n                            formik.values.ingredients.map((_, index) => {\n                                return (\n                                <div key={ index } >\n                                    <Grid columns={ 2 }>\n                                        <Grid.Column>\n                                        <FormInputField label='Amount' name={`ingredients[${index}].amount`} type='number' formik={ formik } />\n                                            <FormSelectField label='Amount Type' name={`ingredients[${index}].amount_type`} formik={formik} options={amountTypeDrops} />\n                                        </Grid.Column>\n\n                                        <Grid.Column>\n                                        <FormSelectField label='Herb' name={`ingredients[${index}].herb_id`} formik={formik} options={IDDropdowns(herbs)} />\n                                            <FormSelectField label='Herb Type' name={`ingredients[${index}].herb_type`} formik={formik} options={herbTypeDrops} />\n                                        </Grid.Column>\n                                    </Grid>\n                                    <Button  onClick={() => remove(index)}>Remove Ingredient</Button>\n                                    <Button onClick={() => push({ amount: \"\", amount_type: \"\", herb_id:\"\", herb_type:\"\" })}>\n                                    Add another ingredient\n                                    </Button>\n                                </div>\n                            )}) : null }\n                            {show === null ? \n                                <Button onClick={() => {setShow(true)}}>\n                                   Add new ingredients to this recipe <Icon name='add' />\n                                </Button> : null}\n                        </div>\n                    )}\n                    </FieldArray>                       \n                </Card.Content>\n                <Button fluid type='submit'>Submit edits</Button>\n            </Form>\n        </Card>\n        </div>\n    )}\n    </Formik>\n    )\n}\n\nexport default RecipeEdits","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Resorces.js",["372","373"],"import React, { useState, useContext } from 'react'\n\nfunction Resources () {\n    return (\n    <>\n        <header>Resources</header>\n        <p>For most of our initial herbal, recipe, and properties enteries, we leveraged <strong>The Modern Dispensatory: A Medicine-Making Guide</strong>, written by Thomas Easley and Steven Horne. This is a great introductory resource to get you start and give you some baseline level knowledge on herbalism. </p>\n        </>\n    )\n}\n\nexport default Resources","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/herb/HerbEditHelpers.js",[],{"ruleId":"374","replacedBy":"375"},{"ruleId":"376","replacedBy":"377"},{"ruleId":"378","severity":1,"message":"379","line":21,"column":8,"nodeType":"380","endLine":21,"endColumn":24,"suggestions":"381"},{"ruleId":"382","severity":1,"message":"383","line":2,"column":18,"nodeType":"384","messageId":"385","endLine":2,"endColumn":22},{"ruleId":"382","severity":1,"message":"386","line":2,"column":44,"nodeType":"384","messageId":"385","endLine":2,"endColumn":49},{"ruleId":"382","severity":1,"message":"387","line":2,"column":65,"nodeType":"384","messageId":"385","endLine":2,"endColumn":73},{"ruleId":"382","severity":1,"message":"388","line":3,"column":10,"nodeType":"384","messageId":"385","endLine":3,"endColumn":21},{"ruleId":"382","severity":1,"message":"389","line":8,"column":12,"nodeType":"384","messageId":"385","endLine":8,"endColumn":21},{"ruleId":"382","severity":1,"message":"390","line":8,"column":23,"nodeType":"384","messageId":"385","endLine":8,"endColumn":35},{"ruleId":"382","severity":1,"message":"391","line":1,"column":42,"nodeType":"384","messageId":"385","endLine":1,"endColumn":51},{"ruleId":"382","severity":1,"message":"392","line":1,"column":27,"nodeType":"384","messageId":"385","endLine":1,"endColumn":37},{"ruleId":"382","severity":1,"message":"393","line":2,"column":15,"nodeType":"384","messageId":"385","endLine":2,"endColumn":19},{"ruleId":"382","severity":1,"message":"394","line":2,"column":21,"nodeType":"384","messageId":"385","endLine":2,"endColumn":27},{"ruleId":"382","severity":1,"message":"395","line":3,"column":10,"nodeType":"384","messageId":"385","endLine":3,"endColumn":20},{"ruleId":"382","severity":1,"message":"391","line":1,"column":42,"nodeType":"384","messageId":"385","endLine":1,"endColumn":51},{"ruleId":"378","severity":1,"message":"396","line":25,"column":8,"nodeType":"380","endLine":25,"endColumn":12,"suggestions":"397"},{"ruleId":"398","severity":1,"message":"399","line":60,"column":61,"nodeType":"400","messageId":"401","endLine":60,"endColumn":63},{"ruleId":"398","severity":1,"message":"399","line":63,"column":53,"nodeType":"400","messageId":"401","endLine":63,"endColumn":55},{"ruleId":"382","severity":1,"message":"391","line":1,"column":28,"nodeType":"384","messageId":"385","endLine":1,"endColumn":37},{"ruleId":"382","severity":1,"message":"402","line":1,"column":39,"nodeType":"384","messageId":"385","endLine":1,"endColumn":47},{"ruleId":"382","severity":1,"message":"403","line":5,"column":16,"nodeType":"384","messageId":"385","endLine":5,"endColumn":22},{"ruleId":"382","severity":1,"message":"404","line":7,"column":10,"nodeType":"384","messageId":"385","endLine":7,"endColumn":26},{"ruleId":"378","severity":1,"message":"396","line":25,"column":8,"nodeType":"380","endLine":25,"endColumn":12,"suggestions":"405"},{"ruleId":"374","replacedBy":"406"},{"ruleId":"376","replacedBy":"407"},{"ruleId":"382","severity":1,"message":"408","line":2,"column":37,"nodeType":"384","messageId":"385","endLine":2,"endColumn":42},{"ruleId":"382","severity":1,"message":"409","line":5,"column":43,"nodeType":"384","messageId":"385","endLine":5,"endColumn":50},{"ruleId":"398","severity":1,"message":"399","line":60,"column":61,"nodeType":"400","messageId":"401","endLine":60,"endColumn":63},{"ruleId":"382","severity":1,"message":"402","line":1,"column":17,"nodeType":"384","messageId":"385","endLine":1,"endColumn":25},{"ruleId":"382","severity":1,"message":"392","line":1,"column":27,"nodeType":"384","messageId":"385","endLine":1,"endColumn":37},"no-native-reassign",["410"],"no-negated-in-lhs",["411"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'properties'. Either include it or remove the dependency array.","ArrayExpression",["412"],"no-unused-vars","'Icon' is defined but never used.","Identifier","unusedVar","'Modal' is defined but never used.","'TextArea' is defined but never used.","'StyledInput' is defined but never used.","'editState' is assigned a value but never used.","'setEditState' is assigned a value but never used.","'useEffect' is defined but never used.","'useContext' is defined but never used.","'Grid' is defined but never used.","'Header' is defined but never used.","'AppContext' is defined but never used.","React Hook useEffect has a missing dependency: 'herbs'. Either include it or remove the dependency array.",["413"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useState' is defined but never used.","'Button' is defined but never used.","'FormTextBoxField' is defined but never used.",["414"],["410"],["411"],"'Field' is defined but never used.","'Divider' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"415","fix":"416"},{"desc":"417","fix":"418"},{"desc":"417","fix":"419"},"Update the dependencies array to be: [properties, selectedLetter]",{"range":"420","text":"421"},"Update the dependencies array to be: [herbs, id]",{"range":"422","text":"423"},{"range":"424","text":"423"},[833,849],"[properties, selectedLetter]",[1065,1069],"[herbs, id]",[1065,1069]]