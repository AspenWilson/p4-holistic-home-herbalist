[{"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/index.js":"1","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/App.js":"2","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Authentication.js":"3","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/NavBar.js":"4","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herbs.js":"5","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbCard.js":"6","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipes.js":"7","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Properties.js":"8","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Home.js":"9","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeCard.js":"10","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/PropertyCard.js":"11","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herb.js":"12","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Profile.js":"13","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipe.js":"14","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Search.js":"15","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Filter.js":"16","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/ModalPopout.js":"17","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/FormHelpers.js":"18","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbForm.js":"19","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeForm.js":"20","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbEdits.js":"21","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeEdits.js":"22","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/EditFormHelpers.js":"23","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/context/AppContext.js":"24","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentRecipe.js":"25","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentProfile.js":"26","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentEdits.js":"27","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/StylingHelpers.js":"28","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/CardHelpers.js":"29","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/GeneralHelpers.js":"30"},{"size":239,"mtime":1696283460158,"results":"31","hashOfConfig":"32"},{"size":1578,"mtime":1698960070218,"results":"33","hashOfConfig":"32"},{"size":2680,"mtime":1698971134435,"results":"34","hashOfConfig":"32"},{"size":1944,"mtime":1698959611112,"results":"35","hashOfConfig":"32"},{"size":3274,"mtime":1698960897090,"results":"36","hashOfConfig":"32"},{"size":2951,"mtime":1698960897090,"results":"37","hashOfConfig":"32"},{"size":2752,"mtime":1698971134466,"results":"38","hashOfConfig":"32"},{"size":2920,"mtime":1698971134462,"results":"39","hashOfConfig":"32"},{"size":2121,"mtime":1698940056746,"results":"40","hashOfConfig":"32"},{"size":2737,"mtime":1698971134425,"results":"41","hashOfConfig":"32"},{"size":2088,"mtime":1698959611108,"results":"42","hashOfConfig":"32"},{"size":2380,"mtime":1698971134438,"results":"43","hashOfConfig":"32"},{"size":2227,"mtime":1698959611085,"results":"44","hashOfConfig":"32"},{"size":4489,"mtime":1698960897090,"results":"45","hashOfConfig":"32"},{"size":365,"mtime":1698954606809,"results":"46","hashOfConfig":"32"},{"size":572,"mtime":1698875857546,"results":"47","hashOfConfig":"32"},{"size":2301,"mtime":1698959611043,"results":"48","hashOfConfig":"32"},{"size":3687,"mtime":1698958743430,"results":"49","hashOfConfig":"32"},{"size":5368,"mtime":1698971134466,"results":"50","hashOfConfig":"32"},{"size":4254,"mtime":1698971134458,"results":"51","hashOfConfig":"32"},{"size":8854,"mtime":1698960897090,"results":"52","hashOfConfig":"32"},{"size":6619,"mtime":1698971134428,"results":"53","hashOfConfig":"32"},{"size":4431,"mtime":1698959611112,"results":"54","hashOfConfig":"32"},{"size":4913,"mtime":1698960712644,"results":"55","hashOfConfig":"32"},{"size":1042,"mtime":1698878611382,"results":"56","hashOfConfig":"32"},{"size":2073,"mtime":1698962308362,"results":"57","hashOfConfig":"32"},{"size":2173,"mtime":1698960897105,"results":"58","hashOfConfig":"32"},{"size":1310,"mtime":1698247625254,"results":"59","hashOfConfig":"32"},{"size":4564,"mtime":1698971134424,"results":"60","hashOfConfig":"32"},{"size":1803,"mtime":1698960529846,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1ecga3h",{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/index.js",[],["125","126"],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/App.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Authentication.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/NavBar.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herbs.js",["127"],"import React, { useState, useContext, useEffect } from 'react'\nimport { Card, Grid, Divider } from 'semantic-ui-react'\nimport { useParams } from 'react-router-dom'\nimport { AppContext } from '../context/AppContext';\nimport { handleSearches, handleFilterChange } from './helpers/GeneralHelpers'\nimport HerbCard from './HerbCard'\nimport Search from './Search'\nimport Filter from './Filter'\nimport ModalPopout from './ModalPopout'\nimport \"../index.css\"\n\nfunction Herbs({ page }) {\n    const { id } = useParams()\n    const { properties, herbs, savedHerbs, enteredHerbs } = useContext(AppContext)\n\n    const [searchResults, setSearchResults] = useState([]);\n    const [filteredHerbs, setFilteredHerbs] = useState([])\n    const [selectedProperties, setSelectedProperties] = useState([]);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [propertyHerbs, setPropertyHerbs] = useState([])\n\n    useEffect(() => {\n        const list = herbs.filter((herb) => herb.properties.some((property) => property.id === id))\n        setPropertyHerbs(list)\n    }, [id])\n    \n    const herbsList = \n        page === 'home' ? herbs :\n        page === 'profile - saved' ? savedHerbs :\n        page === 'profile - entered' ? enteredHerbs :\n        page === 'properties' ? propertyHerbs :\n        null\n\n    const displayedHerbs = \n        searchTerm && searchResults.length > 0 ? searchResults.map((herb) => <HerbCard key={herb.id} herb={herb} page={page}/>) :\n        searchTerm && searchResults.length === 0 ? <h3>No herbs match your search.</h3> :\n        selectedProperties.length > 0 && filteredHerbs.length > 0 ? filteredHerbs.map((herb) => <HerbCard key={herb.id} herb={herb} page={page}/>) :\n        selectedProperties.length > 0 && filteredHerbs.length === 0 ? <h3>No herbs match your filter.</h3> : \n        id && propertyHerbs.length > 0 ? propertyHerbs.map((herb) => <HerbCard key={herb.id} herb={herb} />) :\n        id && propertyHerbs.length === 0 ? <h3>No herbs have this property.</h3> :\n        herbsList.map((herb) => <HerbCard key={herb.id} herb={herb} page={page}/>);\n\n    return (\n        <div>\n            <ModalPopout modalType='new herb' msg='Add a new herb' />\n            <Divider />\n            <Grid columns={ 2 }>\n                <Grid.Column>\n                    <h3>Search for herbs by name...</h3>\n                    <Search \n                        onSearch={(searchTerm) => handleSearches(searchTerm, setSearchTerm, herbsList, setSearchResults)} \n                        searchedHerbs={ searchResults }\n                        searchTerm = { searchTerm }\n                    />\n                </Grid.Column>\n\n                <Grid.Column>\n                    <h3> OR filter herbs by their properties</h3>\n                    <Filter \n                        onFilterChange={(selectedProperties) => handleFilterChange(selectedProperties, setSelectedProperties, herbsList, setFilteredHerbs)}\n                        selectedProperties={ selectedProperties } \n                        properties={ properties }\n                    />\n                </Grid.Column>\n            </Grid>\n            <br />\n            <Card.Group itemsPerRow={ 4 } >\n                { displayedHerbs }\n            </Card.Group>\n        </div>\n    )\n}\n\nexport default Herbs\n\n","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbCard.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipes.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Properties.js",["128"],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Home.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeCard.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/PropertyCard.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herb.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Profile.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipe.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Search.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Filter.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/ModalPopout.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/FormHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbForm.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeForm.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbEdits.js",["129"],"import React, { useContext, useEffect, useState } from \"react\"\nimport {  Formik, Form, FieldArray } from \"formik\"\nimport * as yup from \"yup\"\nimport { AppContext } from \"../context/AppContext\"\nimport { Card, Grid, Image, Icon, Button } from 'semantic-ui-react'\nimport { DosageEditCards, PropertyEditCards } from \"./helpers/EditFormHelpers\"\nimport { FormHeader } from \"./helpers/StylingHelpers\"\nimport { IDDropdowns, dosageDrops, FormInputField, FormTextBoxField, FormMultiSelectField, FormSelectField } from \"./helpers/FormHelpers\"\nimport { headers } from \"./helpers/GeneralHelpers\"\n\n\nfunction HerbEdits ({ id }) {\n    const { properties, handleModalSuccess, user, refreshEnteredHerbs, refreshHerbs } = useContext(AppContext)\n    const [herb, setHerb] = useState(null)\n    const [deletedDosages, setDeletedDosages] = useState([])\n    const [deletedProperties, setDeletedProperties] = useState([])\n    const [show, setShow] = useState(null)\n\n    useEffect(() => {\n        fetch(`/api/herbs/${id}`)\n          .then((resp) => resp.json())\n          .then((data) => {\n            setHerb(data);\n          })\n      }, [id]);\n    \n      const formSchema = yup.object().shape({\n        name: yup.string().required(\"Herb name is required.\"),\n        latin_name: yup.string().required(\"Latin name is required.\"),\n        description: yup.string().required(\"Herb description is required.\"),\n        warnings: yup.string().required(\"Herb warnings are required. 'None' is acceptable if herb has no known warnings.\"),\n        image_url: yup.string().required(\"Image url link is required.\"),\n        dosages: yup.array().of(\n            yup.object().shape({\n                dosage_form: yup.string(),\n                dosage_description: yup.string()\n            })\n        ),\n        property_ids: yup.array().required(\"At least one property must be added to your new herb.\").min(1, \"At least one property must be added to your new herb.\")\n    })\n\n    const handleSubmit = (values) => {\n        const propertyIdsToRemove = deletedProperties.map((property) => property.id);\n        const updatedProperties = values.property_ids.filter((propertyID)=> !propertyIdsToRemove.includes(propertyID))\n        \n        const updatedHerb = {\n            name: values.name,\n            latin_name: values.latin_name,\n            description: values.description,\n            warnings: values.warnings,\n            image_url: values.image_url,\n            dosages: values.dosages,\n            property_ids: updatedProperties\n        }\n        fetch(`/api/herbs/${id}`, {\n            method: 'PATCH',\n            headers,\n            body: JSON.stringify(updatedHerb, null, 2)\n        }).then((resp) => {\n            if(resp.ok) {\n                resp.json().then((data) => {\n                    if (deletedDosages.length > 0) {\n                        deletedDosages.map((dosage) => {\n                            fetch(`/api/herbs/${herb.id}/dosages/${dosage.id}`, {\n                                method: 'DELETE'\n                            })\n                        })\n                    }\n                handleModalSuccess()\n                refreshEnteredHerbs(user)\n                refreshHerbs()\n            })     \n        }})\n    }\n\n    if (!herb) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <Formik \n            initialValues = {{\n                name: herb.name || \"\",\n                latin_name: herb.latin_name || \"\",\n                description: herb.description || \"\",\n                warnings: herb.warnings || \"\",\n                image_url: herb.image_url || \"\",\n                dosages: show ? [{ dosage_form: \"\", dosage_description: \"\" }] : [],\n                property_ids: herb.properties.map((property) => property.id) || []\n            }}\n            enableReinitialize={ true }\n            validationSchema = { formSchema }\n            onSubmit = { handleSubmit }\n        >\n        {(formik) => (\n            <div className='container'>\n            <Card fluid className='flex-outer'>\n                <Form>\n                    <Card.Content className='allCards'>\n                        <Grid columns={ 2 }>\n                            <Grid.Column>\n                                <FormInputField label='Herb Name' name='name' type='text' formik={ formik } />\n                                <FormInputField label='Latin Name' name='latin_name' type='text' formik={ formik } />\n                            </Grid.Column>\n\n                            <Grid.Column>\n                                <FormInputField label='Image Link' name='image_url' type='text' formik={ formik } />\n                                <FormHeader as='h3' textAlign='center'>Current Image</FormHeader>\n                                <Image \n                                    size='small'\n                                    centered\n                                    src={formik.values.image_url}\n                                />\n                            </Grid.Column>\n                        </Grid>\n\n                        <Grid columns={ 2 }>\n                            <Grid.Column>\n                                <FormTextBoxField label='Description' name='description' formik={ formik } />\n                            </Grid.Column>\n\n                            <Grid.Column>\n                                <FormTextBoxField label='Warnings' name='warnings' formik={ formik } />                           \n                            </Grid.Column>\n                        </Grid>\n\n                        <FormHeader as='h3'>Existing Dosages</FormHeader>\n                        <FieldArray name=\"dosages\">\n                        {({ push, remove }) => (\n                            <div>\n                                <Card.Group>\n                                    {herb.dosages.map((dosage, index) => {\n                                        return (\n                                            <DosageEditCards  key={ index } dosage={ dosage } deletedDosages={ deletedDosages } setDeletedDosages={ setDeletedDosages } />\n                                        )\n                                    })}\n                                </Card.Group>\n                                \n                                {show === true ? formik.values.dosages.map((_, index) =>  {\n                                    return (\n                                    <div key={ index }>\n                                        <FormInputField label='Dosage Description' name={`dosages[${index}].dosage_description`} type='text' formik={ formik } />\n                                        <FormSelectField label='Doage Form' name={`dosages[${index}].dosage_form`} formik={formik} options={dosageDrops} />\n\n                                        <Button onClick={() => remove(index)}>\n                                            Remove Dosage\n                                        </Button>\n                                        <br />\n                                        <Button onClick={() => {\n                                            push({ dosage_form: \"\", dosage_description: \"\"})}}\n                                        >\n                                            Add another dosage <Icon name='add' />\n                                        </Button>\n                                    </div>\n                                )}) : null }\n\n                                {show === null ? <Button onClick={() => setShow(true)}>\n                                   Add new dosages to this herb <Icon name='add' />\n                                </Button> : null}\n                            </div>\n                        )}\n                        </FieldArray>\n\n                        <FieldArray name='property_ids'>\n                            <div>\n                                <FormHeader as='h3'>Existing Properties</FormHeader>\n                                    <Card.Group>\n                                        {herb.properties.map((property) => {\n                                            return (\n                                                <PropertyEditCards property={ property } deletedProperties={ deletedProperties } setDeletedProperties={ setDeletedProperties } />\n                                                )\n                                            })}\n                                    </Card.Group>\n                                    <FormMultiSelectField label='Add Properties' name='property_ids' formik={ formik } options={ IDDropdowns(properties) } />\n                            </div>\n                        </FieldArray>\n                    </Card.Content>\n                    <Button fluid type='submit'>Submit edits</Button> \n                </Form>\n            </Card>\n            </div>\n        )}\n    </Formik>      \n    )\n}\n\nexport default HerbEdits\n","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeEdits.js",["130"],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/EditFormHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/context/AppContext.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentRecipe.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentProfile.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentEdits.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/StylingHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/CardHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/GeneralHelpers.js",[],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":25,"column":8,"nodeType":"137","endLine":25,"endColumn":12,"suggestions":"138"},{"ruleId":"135","severity":1,"message":"139","line":21,"column":8,"nodeType":"137","endLine":21,"endColumn":24,"suggestions":"140"},{"ruleId":"141","severity":1,"message":"142","line":63,"column":53,"nodeType":"143","messageId":"144","endLine":63,"endColumn":55},{"ruleId":"141","severity":1,"message":"142","line":60,"column":61,"nodeType":"143","messageId":"144","endLine":60,"endColumn":63},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'herbs'. Either include it or remove the dependency array.","ArrayExpression",["147"],"React Hook useEffect has a missing dependency: 'properties'. Either include it or remove the dependency array.",["148"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},"Update the dependencies array to be: [herbs, id]",{"range":"153","text":"154"},"Update the dependencies array to be: [properties, selectedLetter]",{"range":"155","text":"156"},[1056,1060],"[herbs, id]",[833,849],"[properties, selectedLetter]"]