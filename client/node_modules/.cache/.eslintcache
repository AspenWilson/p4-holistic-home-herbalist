[{"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/index.js":"1","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/App.js":"2","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Authentication.js":"3","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/NavBar.js":"4","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herbs.js":"5","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbCard.js":"6","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipes.js":"7","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Properties.js":"8","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Home.js":"9","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeCard.js":"10","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/PropertyCard.js":"11","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herb.js":"12","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Profile.js":"13","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipe.js":"14","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/helpers.js":"15","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Search.js":"16","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Filter.js":"17","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/ModalPopout.js":"18","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/FormHelpers.js":"19","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/SuccessMsg.js":"20","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbForm.js":"21","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeForm.js":"22","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbEdits.js":"23","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeEdits.js":"24","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/EditFormHelpers.js":"25","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/context/AppContext.js":"26","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentRecipe.js":"27","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentProfile.js":"28","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentEdits.js":"29","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/ProfileHelpers.js":"30","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/StylingHelpers.js":"31"},{"size":239,"mtime":1696283460158,"results":"32","hashOfConfig":"33"},{"size":1582,"mtime":1698247008466,"results":"34","hashOfConfig":"33"},{"size":2687,"mtime":1698247660787,"results":"35","hashOfConfig":"33"},{"size":1941,"mtime":1698246177438,"results":"36","hashOfConfig":"33"},{"size":3337,"mtime":1698848030971,"results":"37","hashOfConfig":"33"},{"size":3231,"mtime":1698246177438,"results":"38","hashOfConfig":"33"},{"size":2657,"mtime":1698246971951,"results":"39","hashOfConfig":"33"},{"size":2812,"mtime":1698246177454,"results":"40","hashOfConfig":"33"},{"size":2036,"mtime":1698163452406,"results":"41","hashOfConfig":"33"},{"size":3027,"mtime":1698246971937,"results":"42","hashOfConfig":"33"},{"size":1927,"mtime":1698246177438,"results":"43","hashOfConfig":"33"},{"size":3738,"mtime":1698246177430,"results":"44","hashOfConfig":"33"},{"size":2341,"mtime":1698246177438,"results":"45","hashOfConfig":"33"},{"size":5664,"mtime":1698246177425,"results":"46","hashOfConfig":"33"},{"size":1803,"mtime":1698848128252,"results":"47","hashOfConfig":"33"},{"size":642,"mtime":1698246971951,"results":"48","hashOfConfig":"33"},{"size":656,"mtime":1698847915119,"results":"49","hashOfConfig":"33"},{"size":2264,"mtime":1698246177410,"results":"50","hashOfConfig":"33"},{"size":1910,"mtime":1698246177430,"results":"51","hashOfConfig":"33"},{"size":235,"mtime":1698246971940,"results":"52","hashOfConfig":"33"},{"size":6949,"mtime":1698246177411,"results":"53","hashOfConfig":"33"},{"size":5851,"mtime":1698246971926,"results":"54","hashOfConfig":"33"},{"size":11569,"mtime":1698246177422,"results":"55","hashOfConfig":"33"},{"size":9286,"mtime":1698246971936,"results":"56","hashOfConfig":"33"},{"size":4430,"mtime":1698198591192,"results":"57","hashOfConfig":"33"},{"size":4997,"mtime":1698247097689,"results":"58","hashOfConfig":"33"},{"size":1026,"mtime":1698246177423,"results":"59","hashOfConfig":"33"},{"size":2052,"mtime":1698246177438,"results":"60","hashOfConfig":"33"},{"size":2642,"mtime":1698246177425,"results":"61","hashOfConfig":"33"},{"size":314,"mtime":1698198591190,"results":"62","hashOfConfig":"33"},{"size":1310,"mtime":1698247625254,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1ecga3h",{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/index.js",[],["133","134"],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/App.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Authentication.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/NavBar.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herbs.js",["135","136","137"],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbCard.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipes.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Properties.js",["138","139"],"import React, {useContext, useState, useEffect} from 'react'\nimport PropertyCard from './PropertyCard'\nimport { UserContext } from '../context/AppContext';\nimport { Card, Button, Divider } from 'semantic-ui-react'\nimport Search from './Search';\nimport { handleSearches } from '../helpers';\n\n\nfunction Properties() {\n    const { properties } = useContext(UserContext)\n    const [searchTerm, setSearchTerm] = useState('');\n    const [searchResults, setSearchResults] = useState([]);\n    const [selectedLetter, setSelectedLetter] = useState('');\n    const [filteredProperties, setFilteredProperties] = useState([]);\n\n    useEffect(() => {\n        const filtered = properties.filter(property =>\n            property.name.charAt(0).toUpperCase() === selectedLetter\n        );\n        setFilteredProperties(filtered);\n    }, [selectedLetter])\n\n    const uniqueFirstLetters = [...new Set(properties.map(property => property.name.charAt(0).toUpperCase()))];\n\n    // const lettersLength = uniqueFirstLetters.length\n\n    const letters = uniqueFirstLetters.map((letter) => {\n        return (\n            <Button circular style={{ backgroundColor: '#056d52', color:'white' }}key={letter}\n            className={selectedLetter === letter ? 'active' : ''}\n            onClick={() => setSelectedLetter(letter)}><strong>{letter}</strong></Button>\n    )})\n\n    const displayedProperties = \n        searchTerm && searchResults.length > 0\n            ? searchResults.map((property) => <PropertyCard property={property} key={property.id} />)\n        : searchTerm && searchResults.length === 0\n            ? <h3>No properties match your search.</h3>\n        : selectedLetter && filteredProperties.length > 0\n            ? filteredProperties.map((property) => <PropertyCard property={property} key={property.id} />)\n        : selectedLetter && filteredProperties.length === 0\n            ? <h3>No properties match your filters.</h3>\n        : properties.map ((property) => <PropertyCard property={property} key={property.id}/>)\n\n    return (\n        <div>\n            <h3>Search for properties by name</h3>\n            <Search \n            onSearch={(searchTerm) => handleSearches(searchTerm, properties, setSearchResults)}\n            searchedProperties={searchResults}\n            setSearchTerms={setSearchTerm}\n            />\n            <Divider />\n            <h3> Filter properties by first letter</h3>\n            <Button circular style={{ backgroundColor: '#056d52', color:'white' }}\n            className={selectedLetter === '' ? 'active' : ''}\n            onClick={() => setSelectedLetter('')}><strong>ALL</strong></Button>\n            {letters}\n            <Divider />\n            <Card.Group itemsPerRow={3}>\n                {displayedProperties}\n            </Card.Group>\n        </div>\n    )\n}\n\nexport default Properties","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Home.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeCard.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/PropertyCard.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Herb.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Profile.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Recipe.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/helpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Search.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/Filter.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/ModalPopout.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/FormHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/SuccessMsg.js",[],["140","141"],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbForm.js",["142"],"import React, { useContext } from \"react\"\nimport { Formik, Form, FieldArray } from \"formik\"\nimport * as yup from \"yup\"\nimport { UserContext } from \"../context/AppContext\"\nimport { StyledSelect, FormHeader, StyledTextBox, StyledInput } from \"./helpers/StylingHelpers\"\nimport { headers } from \"../helpers\"\nimport { Card, Grid, Image, Button } from 'semantic-ui-react'\nimport { HerbInitialValues, IDDropdowns, dosageDrops, displayErrors } from \"./helpers/FormHelpers\"\n\nfunction HerbForm () {\n  const { properties, handleModalSuccess, user, refreshEnteredHerbs, refreshHerbs} = useContext(UserContext)\n  const imagePlaceholder = \"https://i0.wp.com/wingsofchange.us/wp-content/uploads/2021/04/Leaf-placeholder-web-300px.png?fit=300%2C300&ssl=1\"\n\n  const formSchema = yup.object().shape({\n    name: yup.string().required(\"Herb name is required.\"),\n    latin_name: yup.string().required(\"Latin name is required.\"),\n    description: yup.string().required(\"Herb description is required.\"),\n    warnings: yup.string().required(\"Herb warnings are required. 'None' is acceptable if herb has no known warnings.\"),\n    image_url: yup.string().required(\"Image url link is required.\"),\n    dosages: yup.array().of(\n      yup.object().shape({\n        dosage_form: yup.string().required(\"Dosage form is required. \"),\n        dosage_description: yup.string().required(\"Dosage description is required. Example: 'Dried leaf (1:5, 50% alcohol); 1-4 ml (0.2-0.8 tsp.) 3-4 times daily.'\")\n      })\n    ).min(1, 'At least one dosage is required.'),\n    property_ids: yup.array().required(\"At least one property must be added to your new herb.\").min(1, \"At least one property must be added to your new herb.\")\n  })\n\n  const handleSubmit = (values, {resetForm}) => {\n    const newHerbValues = {\n      name : values.name,\n      latin_name : values.latin_name, \n      description : values.description, \n      warnings : values.warnings,\n      image_url : values.image_url,\n      dosages: values.dosages,\n      property_ids : values.property_ids\n    }\n    fetch('/api/herbs', {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify(newHerbValues, null, 2)\n    })\n    .then((resp) => {\n      if (resp.ok) {\n        resp.json().then(data => {\n          handleModalSuccess()\n          refreshEnteredHerbs(user)\n          refreshHerbs()\n          resetForm({ values: HerbInitialValues })\n        })\n      }})\n  };\n    \n  return (\n    <Formik \n      initialValues = { HerbInitialValues }\n      validationSchema={ formSchema }\n      onSubmit = { handleSubmit }\n    >\n    {(formik) => (\n    <div className='container'>\n      <Card fluid className='flex-outer'>\n        <Form>\n          <Card.Content className='allCards' >\n            <Grid columns={2}>\n              <Grid.Column>\n                <FormHeader as='h3'>Herb Name</FormHeader>\n                <StyledInput name='name' onChange={formik.handleChange} value={formik.values.name} />\n                {displayErrors(formik.errors.name)}\n\n                <FormHeader as='h3'>Latin Name</FormHeader>\n                <StyledInput name='latin_name' onChange={formik.handleChange} value={formik.values.latin_name} />\n                {displayErrors(formik.errors.latin_name)}\n              </Grid.Column>\n\n              <Grid.Column>\n                <FormHeader as='h3'>Image Link</FormHeader>\n                <StyledInput name='image_url' onChange={formik.handleChange} value={formik.values.image_url} />\n                {displayErrors(formik.errors.image_url)}\n\n                <FormHeader as='h3'>Image Preview</FormHeader>\n                <Image \n                  size='small'\n                  centered\n                  src={formik.values.image_url || imagePlaceholder}\n                />\n              </Grid.Column>\n            </Grid>\n            <br />\n            <Grid columns={2}>\n              <Grid.Column>\n                <FormHeader as='h3'>Description</FormHeader>\n                <StyledTextBox name='description' onChange={formik.handleChange} value={formik.values.description} />\n                {displayErrors(formik.errors.description)}\n              </Grid.Column>\n\n              <Grid.Column>\n                <FormHeader as='h3'>Warnings</FormHeader>\n                <StyledTextBox name='warnings' onChange={formik.handleChange} value={formik.values.warnings} />\n                {displayErrors(formik.errors.warnings)}\n              </Grid.Column>\n            </Grid>\n            \n            <FieldArray name=\"dosages\">\n            {({ push, remove }) => (\n            <div>\n              <FormHeader as='h3'>Add Dosages</FormHeader>\n              <br />\n              {formik.values.dosages.map((_, index) => (\n                <div key={index}>\n                  <Grid columns={2}>\n                    <Grid.Column>\n                      <FormHeader as='h3' >Dosage Description</FormHeader>\n                      <StyledInput\n                        name={`dosages[${index}].dosage_description`}\n                        value={formik.values.dosages.dosage_description}\n                        onChange={formik.handleChange}\n                      />\n                    </Grid.Column>\n\n                    <Grid.Column>\n                      <FormHeader as='h3' >Dosage Form</FormHeader>\n                      <StyledSelect\n                        classNamePrefix=\"Select\"\n                        name={`dosages[${index}].dosage_form`}\n                        options={dosageDrops}\n                        onChange={(selectedOption) => {\n                          formik.setFieldValue(`dosages[${index}].dosage_form`, selectedOption.value)\n                        }}\n                      />\n                    </Grid.Column>\n                  </Grid>\n\n                  <br />\n                  {index > 0 && (\n                    <Button onClick={() => remove(index)}>Remove Dosage</Button>\n                  )}\n                  <br />\n                  </div>\n                ))}\n                <br />\n                <Button onClick={() => push({ dosage_form: \"\", dosage_description: \"\" })}>\n                  Add Dosage\n                </Button>\n              </div>\n            )}\n            </FieldArray>\n\n            <FormHeader as='h3'>Add Properties</FormHeader>\n            <br />\n            <StyledSelect\n              classNamePrefix=\"Select\"\n              isMulti\n              closeMenuOnSelect={false}\n              isClearable={true}\n              options={IDDropdowns(properties)}\n              onChange={(selectedOptions) => {\n                formik.setFieldValue(\n                  \"property_ids\",\n                  selectedOptions.map((option) => option.value)\n                );\n              }}\n            />\n            {displayErrors(formik.errors.property_ids)}\n            <br />\n            <Button fluid type='submit' >Submit</Button>\n          </Card.Content>\n        </Form>\n        </Card>\n      </div>\n      )}\n    </Formik>\n    )\n}\n\nexport default HerbForm\n","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeForm.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/HerbEdits.js",["143","144","145"],"import React, {useContext, useEffect, useState} from \"react\"\nimport {  Formik, Form, FieldArray } from \"formik\"\nimport * as yup from \"yup\"\nimport { UserContext } from \"../context/AppContext\"\nimport { Card, Grid, Image, Icon, Button } from 'semantic-ui-react'\nimport { DosageEditCards, PropertyEditCards } from \"./helpers/EditFormHelpers\"\nimport { StyledSelect, FormHeader, StyledTextBox, StyledInput } from \"./helpers/StylingHelpers\"\nimport { IDDropdowns, dosageDrops, displayErrors } from \"./helpers/FormHelpers\"\n\n\n\nfunction HerbEdits ({ id }) {\n    const { properties, handleModalSuccess, user, refreshEnteredHerbs, refreshHerbs } = useContext(UserContext)\n    const [herb, setHerb] = useState(null)\n    const [herbProperties, setHerbProperties] = useState([])\n    const [deletedDosages, setDeletedDosages] = useState([])\n    const [deletedProperties, setDeletedProperties] = useState([])\n    const [error, setError] = useState(null)\n    const [show, setShow] = useState(null)\n\n    useEffect(() => {\n        fetch(`/api/herbs/${id}`)\n          .then((resp) => resp.json())\n          .then((data) => {\n            setHerb(data);\n            setHerbProperties(data.properties)\n          })\n      }, [id]);\n    \n      const formSchema = yup.object().shape({\n        name: yup.string().required(\"Herb name is required.\"),\n        latin_name: yup.string().required(\"Latin name is required.\"),\n        description: yup.string().required(\"Herb description is required.\"),\n        warnings: yup.string().required(\"Herb warnings are required. 'None' is acceptable if herb has no known warnings.\"),\n        image_url: yup.string().required(\"Image url link is required.\"),\n        dosages: yup.array().of(\n            yup.object().shape({\n                dosage_form: yup.string(),\n                dosage_description: yup.string()\n            })\n        ),\n        property_ids: yup.array().required(\"At least one property must be added to your new herb.\").min(1, \"At least one property must be added to your new herb.\")\n    })\n\n    const handleSubmit = (values) => {\n        const propertyIdsToRemove = deletedProperties.map((property) => property.id);\n        const updatedProperties = values.property_ids.filter((propertyID )=> !propertyIdsToRemove.includes(propertyID))\n        \n        const updatedHerb = {\n            name: values.name,\n            latin_name: values.latin_name,\n            description: values.description,\n            warnings: values.warnings,\n            image_url: values.image_url,\n            dosages: values.dosages,\n            property_ids: updatedProperties\n        }\n        fetch(`/api/herbs/${id}`, {\n            method: 'PATCH',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(updatedHerb, null, 2)\n        })\n        .then((resp) => {\n            if(resp.ok) {\n                resp.json().then((data) => {\n                    if (deletedDosages.length > 0) {\n                        deletedDosages.map((dosage) => {\n                            fetch(`/api/herbs/${herb.id}/dosages/${dosage.id}`, {\n                                method: 'DELETE'\n                            })\n                        })\n                    }\n                handleModalSuccess()\n                refreshEnteredHerbs(user)\n                refreshHerbs()\n            })     \n        }})\n    }\n\n    if (!herb) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <Formik \n            initialValues = {{\n                name: herb.name || \"\",\n                latin_name: herb.latin_name || \"\",\n                description: herb.description || \"\",\n                warnings: herb.warnings || \"\",\n                image_url: herb.image_url || \"\",\n                dosages: show ? [{\n                    dosage_form: \"\", \n                    dosage_description: \"\"\n                }] : [],\n                property_ids: herb.properties.map((property) => property.id) || []\n            }}\n            enableReinitialize={true}\n            validationSchema = {formSchema}\n            onSubmit = {handleSubmit}\n        >\n        {(formik) => (\n            <div className='container'>\n            <Card fluid className='flex-outer'>\n                <Form>\n                    <Card.Content className='allCards'>\n                        <Grid columns={2}>\n                            <Grid.Column>\n                                <FormHeader as='h3'>Herb Name</FormHeader>\n                                <StyledInput name=\"name\" onChange={formik.handleChange} value={formik.values.name} />\n                                {displayErrors(formik.errors.name)}\n\n                                <FormHeader as='h3' >Latin Name</FormHeader>\n                                <StyledInput name=\"latin_name\" onChange={formik.handleChange} value={formik.values.latin_name} />\n                                {displayErrors(formik.errors.latin_name)}\n                            </Grid.Column>\n\n                            <Grid.Column>\n                                <FormHeader as='h3'>Image Link</FormHeader>\n                                <StyledInput name='image_url' onChange={formik.handleChange} value={formik.values.image_url} />\n                                {displayErrors(formik.errors.image_url)}\n\n                                <FormHeader as='h3' textAlign='center'>Current Image</FormHeader>\n                                <Image \n                                    size='small'\n                                    centered\n                                    src={formik.values.image_url}\n                                />\n                            </Grid.Column>\n                        </Grid>\n\n                        <Grid columns={2}>\n                            <Grid.Column>\n\n                                <FormHeader as='h3' >Description</FormHeader>\n                                <StyledTextBox name=\"description\" onChange={formik.handleChange} value={formik.values.description} />\n                                {displayErrors(formik.errors.description)}\n\n                            </Grid.Column>\n\n                            <Grid.Column>\n\n                                <FormHeader as='h3' >Warnings</FormHeader>\n                                <StyledTextBox name=\"warnings\" onChange={formik.handleChange} value={formik.values.warnings} />\n                                {displayErrors(formik.errors.warnings)}\n                            \n                            </Grid.Column>\n                        </Grid>\n\n                        <FormHeader as='h3'>Existing Dosages</FormHeader>\n                        <FieldArray name=\"dosages\">\n                        {({ push, remove }) => (\n                            <div>\n                                <Card.Group>\n                                    {herb.dosages.map((dosage, index) => {\n                                        return (\n                                            <DosageEditCards  key={index} dosage={dosage} deletedDosages={deletedDosages} setDeletedDosages={setDeletedDosages} />\n                                        )\n                                    })}\n                                </Card.Group>\n                                \n                                {show === true ?\n                                formik.values.dosages.map((_, index) =>  {\n                                    return (\n                                    <div key={index}>\n                                        <FormHeader as='h3'>Dosage Form</FormHeader>\n                                        <StyledSelect\n                                            classNamePrefix=\"Select\"\n                                            name={`dosages[${index}].dosage_form`}\n                                            options={dosageDrops}\n                                            onChange={(selectedOption) => {\n                                                formik.setFieldValue(`dosages[${index}].dosage_form`, selectedOption.value)\n                                            }}\n                                        />\n\n\n                                        <FormHeader as='h3' textAlign='center'>Dosage Description</FormHeader>\n                                        <StyledInput name={`dosages[${index}].dosage_description`} onChange={formik.handleChange} value={formik.values.dosages.dosage_description}/>\n\n                                        <Button onClick={() => remove(index)}>\n                                            Remove Dosage\n                                        </Button>\n                                        <br />\n                                        <Button onClick={() => {\n                                            push({ dosage_form: \"\", dosage_description: \"\"})}}\n                                        >\n                                            Add another dosage <Icon name='add' />\n                                        </Button>\n                                    </div>\n                                )})\n                                : null }\n\n                                {show === null ? <Button\n                                    onClick={() => {\n                                        setShow(true)}}\n                                >\n                                   Add new dosages to this herb <Icon name='add' />\n                                </Button> : null}\n                            </div>\n                        )}\n                        </FieldArray>\n\n                        <FieldArray name='property_ids'>\n                            <div>\n                                <FormHeader as='h3'>Existing Properties</FormHeader>\n                                    <Card.Group>\n                                        {herb.properties.map((property) => {\n                                            return (\n                                                <PropertyEditCards property={property} deletedProperties={deletedProperties} setDeletedProperties={setDeletedProperties} />\n                                                )\n                                            })}\n                                    </Card.Group>\n\n                                    <FormHeader as='h3'>Add Properties</FormHeader>\n                                    <StyledSelect\n                                        classNamePrefix=\"Select\"\n                                        isMulti\n                                        isClearable={true}\n                                        closeMenuOnSelect={false}\n                                        options={IDDropdowns(properties)}\n                                        onChange={(selectedOptions) => {\n                                            formik.setFieldValue(\n                                                \"property_ids\",\n                                                formik.values.property_ids.concat(\n                                                    selectedOptions.map((option) => option.value)\n                                                    ));\n                                        }}\n                                    />\n                                    {displayErrors(formik.errors.property_ids)}\n                            </div>\n                        </FieldArray>\n                    </Card.Content>\n\n                    <Button fluid type='submit'>Submit edits</Button> \n                </Form>\n            </Card>\n            </div>\n        )}\n    </Formik>      \n    )\n}\n\nexport default HerbEdits\n","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/RecipeEdits.js",["146","147"],"import React, {useContext, useEffect, useState} from \"react\"\nimport { Formik, Form, FieldArray } from \"formik\"\nimport * as yup from \"yup\"\nimport { UserContext } from \"../context/AppContext\"\nimport { Card, Grid, Button, Icon } from 'semantic-ui-react'\nimport { IngredientEditCards } from \"./helpers/EditFormHelpers\"\nimport { StyledSelect, FormHeader, StyledTextBox, StyledInput } from \"./helpers/StylingHelpers\"\nimport { IDDropdowns, amountTypeDrops, herbTypeDrops, displayErrors } from \"./helpers/FormHelpers\"\n\n\nfunction RecipeEdits ({ id }) {\n    const { handleModalSuccess, user, herbs, refreshRecipes, refreshEnteredRecipes } = useContext(UserContext)\n    const [recipe, setRecipe] = useState(null)\n    const [deletedIngredients, setDeletedIngredients] = useState([])\n    const [show, setShow] = useState(null)\n    const [ingredients, setIngredients] = useState([])\n\n    useEffect(() => {\n        fetch(`/api/recipes/${id}`)\n        .then ((resp) => resp.json())\n        .then ((data) => {\n            setRecipe(data)\n        })\n    }, [id])\n\n    useEffect(() => {\n        fetch(`/api/recipes/${id}/ingredients`)\n        .then((resp) => resp.json())\n        .then((data) => setIngredients(data))\n      }, [id])\n\n    const formSchema = yup.object().shape({\n        name: yup.string().required(\"Herb name is required.\"),\n        directions: yup.string().min(50, \"Directions must be at least 50 characters.\").required(\"Directions are required.\"),\n        ingredients : yup.array().of(\n            yup.object().shape({\n                amount: yup.number(),\n                amount_type: yup.string(),\n                herb_type: yup.string(),\n                herb_id: yup.string()\n            })\n        ).min(1, 'At least one ingredient is required.')\n    })\n\n    const handleSubmit = (values) => {\n        const updatedRecipe = {\n            name: values.name, \n            directions: values.directions, \n            ingredients: values.ingredients\n        }\n        fetch(`/api/recipes/${id}`, {\n            method:'PATCH',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(updatedRecipe, null, 2)\n        })\n        .then((resp) => {\n            if(resp.ok) {\n                resp.json().then((data) => {\n                    if (deletedIngredients.length > 0) {\n                        deletedIngredients.map((ingredient) => {\n                            fetch(`/api/recipes/${recipe.id}/ingredients/${ingredient.id}`, {\n                                method:'DELETE'\n                        })})\n                    }\n                    handleModalSuccess()\n                    refreshEnteredRecipes(user)\n                    refreshRecipes()\n                })\n            } \n        })\n    }\n\n    if (!recipe) {\n        return <div>Loading...</div>\n    }\n\n    return (\n        <Formik \n            initialValues={{\n                name: recipe.name || \"\",\n                directions: recipe.directions || \"\",\n                ingredients: show ? [{\n                    amount: \"\",\n                    amount_type: \"\",\n                    herb_id: \"\",\n                    herb_type: \"\"\n                }] : []\n            }}\n            enableReinitialize={true}\n            validationSchema={formSchema}\n            onSubmit={handleSubmit}\n        >\n        {(formik) => (\n            <div className='container'>\n            <Card fluid className='flex-outer'>\n            <Form>\n                <Card.Content className=\"allCards\" >\n                    <Grid columns={2}>\n                        <Grid.Column>\n                            <FormHeader as='h3'>Recipe Name</FormHeader>\n                            <StyledInput\n                                name='name'\n                                onChange={formik.handleChange}\n                                value={formik.values.name}\n                            />\n                            {displayErrors(formik.errors.name)}\n                        </Grid.Column>\n\n                        <Grid.Column>\n                            <FormHeader as='h3'>Directions</FormHeader>\n                            <StyledTextBox\n                                name='directions'\n                                onChange={formik.handleChange}\n                                value={formik.values.directions}\n                            />\n                            {displayErrors(formik.errors.directions)}\n                        </Grid.Column>\n                    </Grid>\n\n                    <FieldArray name='ingredients'>\n                    {({push, remove}) => (\n                        <div>\n                            <FormHeader as='h3'>Existing Ingredients</FormHeader>\n                            <Card.Group>\n                                {ingredients.map((ingredient) => {\n                                    return (\n                                        <IngredientEditCards ingredient={ingredient} deletedIngredients={deletedIngredients} setDeletedIngredients={setDeletedIngredients} />\n                                    )\n                                })}\n                            </Card.Group>\n\n                            {show === true ?\n                            formik.values.ingredients.map((_, index) => {\n                                return (\n                                <div key={index} >\n                                    <Grid columns={2}>\n                                        <Grid.Column>\n                                            <FormHeader as='h3'>Amount</FormHeader>\n                                            <StyledInput\n                                                name={`ingredients[${index}].amount`}\n                                                onChange={formik.handleChange}\n                                                value={formik.values.ingredients.amount}\n                                            />\n                                            <FormHeader as='h3'>Amount Type</FormHeader>\n                                            <StyledSelect\n                                                classNamePrefix=\"Select\"\n                                                name={`ingredients[${index}].amount_type`}\n                                                options={amountTypeDrops}\n                                                onChange={(selectedOption) => {\n                                                    formik.setFieldValue(`ingredients[${index}].amount_type`, selectedOption.value)\n                                                }}\n                                            />\n                                        </Grid.Column>\n\n                                        <Grid.Column>\n                                            <FormHeader as='h3'>Herb</FormHeader>\n                                            <StyledSelect\n                                                classNamePrefix=\"Select\"\n                                                name={`ingredients[${index}].herb_id`}\n                                                isSearchable\n                                                isClearable\n                                                placeholder='Select an herb. Type to search.'\n                                                options={IDDropdowns(herbs)}\n                                                onChange={(selectedHerb) => {formik.setFieldValue(`ingredients[${index}].herb_id`, selectedHerb.value)}}\n                                            />\n\n                                            <FormHeader as='h3'>Herb Type</FormHeader>\n                                            <StyledSelect\n                                                classNamePrefix=\"Select\"\n                                                name={`ingredients[${index}].herb_type`}\n                                                options={herbTypeDrops}\n                                                onChange={(selectedOption) => {\n                                                    formik.setFieldValue(`ingredients[${index}].herb_type`,selectedOption.value)\n                                                }}\n                                            />\n                                        </Grid.Column>\n                                    </Grid>\n                                    <Button  onClick={() => remove(index)}>Remove Ingredient</Button>\n                                    <Button onClick={() => push({ amount: \"\", amount_type: \"\", herb_id:\"\", herb_type:\"\" })}>\n                                    Add another ingredient\n                                    </Button>\n                                </div>\n                            )}) : null }\n                            {show === null ? \n                                <Button onClick={() => {setShow(true)}}>\n                                   Add new ingredients to this recipe <Icon name='add' />\n                                </Button> : null}\n                        </div>\n                    )}\n                    </FieldArray>                       \n                </Card.Content>\n                <Button fluid type='submit'>Submit edits</Button>\n            </Form>\n        </Card>\n        </div>\n    )}\n    </Formik>\n    )\n}\n\nexport default RecipeEdits","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/EditFormHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/context/AppContext.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentRecipe.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentProfile.js",["148"],"import React, { useContext } from \"react\";\nimport { Button, Card, Grid } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom';\nimport ModalPopout from \"./ModalPopout\";\nimport { headers } from \"../helpers\";\nimport { UserContext } from \"../context/AppContext\";\n\nfunction CommentCard ({ comments }) {\n    const { refreshEnteredComments, user, refreshComments } = useContext(UserContext)\n\n    const handleDelete = (id) => {\n        fetch(`/api/comments/${id}`,{\n            method: 'DELETE',\n            headers\n        })\n        .then ((resp) => {\n            if(resp.ok) {\n                refreshEnteredComments(user)\n                refreshComments()\n            }\n        })\n    }\n    const allComments = comments.map((comment) => {\n        return (\n            <Card>\n                <Grid columns={2}>\n                    <Grid.Column width={12}>\n                        <h4  style={{color: 'black', padding: '10px'}}>{comment.comment}</h4>\n                        <p style={{color: 'black', padding: '10px'}}>\n                        <small>{comment.entered_on}</small></p>\n                    </Grid.Column>\n                    <Grid.Column width={4}>\n                        <Card.Content>\n                            <Button.Group vertical floated='right'>\n\n                                <ModalPopout modalType='comment edits' id={comment.id} msg='Edit Comment'/>\n                                <Button icon='trash' style={{backgroundColor: '#056d52', color:'white'}} onClick={handleDelete(comment.id)}/>\n                            </Button.Group>\n                        </Card.Content>\n                    </Grid.Column>\n                </Grid>\n                <br />\n                <Button fluid style={{backgroundColor: '#056d52', color:'white'}} as={Link} to={`/recipes/${comment.recipe_id}`}>\n                    See Recipe\n                </Button>\n            </Card>\n\n        )\n    })\n\n    return (\n        <Card.Group itemsPerRow={4}>\n            {allComments}\n        </Card.Group>\n    )\n}\n\nexport default CommentCard","/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/CommentEdits.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/ProfileHelpers.js",[],"/Users/aspen/Development/code/phase-4/p4-holistic-home-herbalist/client/src/components/helpers/StylingHelpers.js",[],{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":11,"column":10,"nodeType":"155","messageId":"156","endLine":11,"endColumn":22},{"ruleId":"153","severity":1,"message":"157","line":12,"column":10,"nodeType":"155","messageId":"156","endLine":12,"endColumn":21},{"ruleId":"158","severity":1,"message":"159","line":30,"column":8,"nodeType":"160","endLine":30,"endColumn":12,"suggestions":"161"},{"ruleId":"158","severity":1,"message":"162","line":21,"column":12,"nodeType":"160","endLine":21,"endColumn":28,"suggestions":"163"},{"ruleId":"153","severity":1,"message":"164","line":25,"column":11,"nodeType":"155","messageId":"156","endLine":25,"endColumn":24},{"ruleId":"149","replacedBy":"165"},{"ruleId":"151","replacedBy":"166"},{"ruleId":"153","severity":1,"message":"167","line":12,"column":12,"nodeType":"155","messageId":"156","endLine":12,"endColumn":17},{"ruleId":"153","severity":1,"message":"168","line":15,"column":12,"nodeType":"155","messageId":"156","endLine":15,"endColumn":26},{"ruleId":"153","severity":1,"message":"167","line":18,"column":12,"nodeType":"155","messageId":"156","endLine":18,"endColumn":17},{"ruleId":"169","severity":1,"message":"170","line":73,"column":53,"nodeType":"171","messageId":"172","endLine":73,"endColumn":55},{"ruleId":"153","severity":1,"message":"167","line":15,"column":12,"nodeType":"155","messageId":"156","endLine":15,"endColumn":17},{"ruleId":"169","severity":1,"message":"170","line":70,"column":61,"nodeType":"171","messageId":"172","endLine":70,"endColumn":63},{"ruleId":"153","severity":1,"message":"173","line":11,"column":11,"nodeType":"155","messageId":"156","endLine":11,"endColumn":23},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"no-unused-vars","'StyledSelect' is defined but never used.","Identifier","unusedVar","'IDDropdowns' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'herbs'. Either include it or remove the dependency array.","ArrayExpression",["176"],"React Hook useEffect has a missing dependency: 'properties'. Either include it or remove the dependency array.",["177"],"'lettersLength' is assigned a value but never used.",["174"],["175"],"'error' is assigned a value but never used.","'herbProperties' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'handleDelete' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},"Update the dependencies array to be: [herbs, id]",{"range":"182","text":"183"},"Update the dependencies array to be: [properties, selectedLetter]",{"range":"184","text":"185"},[1182,1186],"[herbs, id]",[829,845],"[properties, selectedLetter]"]